generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url = env("DATABASE_URL")
}

model User {
    id          Int         @id @default(autoincrement())
    username    String      @unique
    password    String      // Will be hashed
    role        UserRole    @default(USER)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    // User preferences
    preferredQuality    String?     @default("auto")    // "auto", "1080p", "720p", "480p", "360p"
    preferredPlaybackMode String?   @default("auto")    // "auto", "direct", "transcode"
    theme              String?     @default("dark")    // "dark", "light", "purple", etc.
    carouselPreferences Json?       // Array of {id, enabled, order} for homepage carousels
    filterPresets      Json?       // Object with keys: scene, performer, studio, tag - each containing array of saved presets

    // Watch history settings
    minimumPlayPercent Int         @default(20)        // Percent of video to watch before incrementing play_count (0-100)
    syncToStash        Boolean     @default(false)     // Admin-only: Sync this user's activity to Stash

    // Future features
    watchHistory WatchHistory[]
    playlists   Playlist[]
    customTheme Json?

    // Per-user ratings and favorites
    sceneRatings     SceneRating[]
    performerRatings PerformerRating[]
    studioRatings    StudioRating[]
    tagRatings       TagRating[]
    galleryRatings   GalleryRating[]
}

model WatchHistory {
    id              Int         @id @default(autoincrement())
    userId          Int
    sceneId         String      // Stash scene ID

    // Playback tracking (syncs with Stash)
    playCount       Int         @default(0)      // Number of 5+ minute sessions
    playDuration    Float       @default(0)      // Total seconds watched (cumulative across all sessions)
    resumeTime      Float?                       // Last playback position in seconds
    lastPlayedAt    DateTime?                    // Last time this scene was played

    // O Counter tracking (syncs with Stash)
    oCount          Int         @default(0)      // Total O counter increments
    oHistory        Json        @default("[]")   // Array of timestamp strings when O was incremented

    // Detailed play session history for analytics
    playHistory     Json        @default("[]")   // Array of {startTime, endTime, quality, duration, seekEvents: [{time, from, to}]}

    // Legacy fields (deprecated, use fields above)
    watchedAt       DateTime    @default(now())
    position        Int         @default(0)
    duration        Int?
    completed       Boolean     @default(false)

    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, sceneId])
    @@index([userId])
    @@index([sceneId])
    @@index([lastPlayedAt])
}

model Playlist {
    id          Int         @id @default(autoincrement())
    name        String
    description String?
    userId      Int
    isPublic    Boolean     @default(false)
    shuffle     Boolean     @default(false)
    repeat      String      @default("none")  // "none", "all", "one"
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    items       PlaylistItem[]
}

model PlaylistItem {
    id          Int         @id @default(autoincrement())
    playlistId  Int
    sceneId     String      // Stash scene ID
    position    Int         // Order in playlist
    addedAt     DateTime    @default(now())
    
    playlist    Playlist    @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    
    @@unique([playlistId, sceneId])
}

model PathMapping {
    id          Int         @id @default(autoincrement())
    stashPath   String      // Path as reported by Stash (e.g., "/data", "C:\Videos")
    peekPath    String      // Path where Peek accesses the files (e.g., "/app/media")
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@unique([stashPath])
}

model SceneRating {
    id          Int         @id @default(autoincrement())
    userId      Int
    sceneId     String      // Stash scene ID
    rating      Int?        // 0-100, null if not rated
    favorite    Boolean     @default(false)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, sceneId])
    @@index([userId])
    @@index([sceneId])
    @@index([favorite])
}

model PerformerRating {
    id          Int         @id @default(autoincrement())
    userId      Int
    performerId String      // Stash performer ID
    rating      Int?        // 0-100, null if not rated
    favorite    Boolean     @default(false)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, performerId])
    @@index([userId])
    @@index([performerId])
    @@index([favorite])
}

model StudioRating {
    id          Int         @id @default(autoincrement())
    userId      Int
    studioId    String      // Stash studio ID
    rating      Int?        // 0-100, null if not rated
    favorite    Boolean     @default(false)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, studioId])
    @@index([userId])
    @@index([studioId])
    @@index([favorite])
}

model TagRating {
    id          Int         @id @default(autoincrement())
    userId      Int
    tagId       String      // Stash tag ID
    rating      Int?        // 0-100, null if not rated
    favorite    Boolean     @default(false)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, tagId])
    @@index([userId])
    @@index([tagId])
    @@index([favorite])
}

model GalleryRating {
    id          Int         @id @default(autoincrement())
    userId      Int
    galleryId   String      // Stash gallery ID
    rating      Int?        // 0-100, null if not rated
    favorite    Boolean     @default(false)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, galleryId])
    @@index([userId])
    @@index([galleryId])
    @@index([favorite])
}

enum UserRole {
    ADMIN
    USER
}
