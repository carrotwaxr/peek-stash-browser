{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Peek Stash Browser","text":"<p>A modern, responsive web application for browsing and managing your Stash media library with advanced filtering, authentication, and adaptive video streaming.</p> <ul> <li> <p> Quick Start</p> <p>Get up and running in minutes with Docker or unRAID</p> <p> Installation Guide</p> </li> <li> <p> Video Streaming</p> <p>Real-time HLS transcoding with multiple quality options</p> <p> Video Playback</p> </li> <li> <p> Playlists</p> <p>Create, manage, and play playlists with shuffle and repeat modes</p> <p> Playlist Guide</p> </li> <li> <p> Developer Docs</p> <p>Comprehensive development documentation and API reference</p> <p> Development Setup</p> </li> </ul>"},{"location":"#features","title":"Features","text":""},{"location":"#core-functionality","title":"Core Functionality","text":"<ul> <li>Secure Authentication - JWT-based authentication with role management (admin/user)</li> <li>Modern Interface - Beautiful, responsive React UI with theme support</li> <li>Advanced Search &amp; Filtering - Comprehensive filtering across performers, scenes, studios, and tags</li> <li>Intelligent Sorting - Multiple sorting options for all content types</li> <li>Mobile Ready - Fully responsive design optimized for all devices</li> </ul>"},{"location":"#video-streaming","title":"Video Streaming","text":"<ul> <li>Adaptive Transcoding - Real-time HLS transcoding with multiple quality options (720p/480p/360p)</li> <li>Smart Playback - Direct play when possible, seamless fallback to transcoding</li> <li>Quality Controls - Automatic and manual quality selection</li> <li>Session Management - Intelligent cleanup of transcoding resources</li> </ul>"},{"location":"#content-management","title":"Content Management","text":"<ul> <li>Detailed Views - Enhanced detail pages for performers, studios, and tags</li> <li>Rich Metadata - Display ratings, statistics, and comprehensive information</li> <li>CRUD Operations - Full create, read, update, delete capabilities</li> <li>Theme Integration - Consistent theming across all components</li> </ul>"},{"location":"#playlist-features","title":"Playlist Features","text":"<ul> <li>Create &amp; Organize - Build custom playlists of your favorite scenes</li> <li>Shuffle Mode - Randomize playback order with Fisher-Yates algorithm</li> <li>Repeat Modes - None, Repeat All, or Repeat One</li> <li>Drag &amp; Drop - Intuitive reordering with HTML5 drag-and-drop</li> <li>Status Cards - See playlist context when viewing scenes</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<p>Peek uses a modern single-container architecture for production deployments:</p> <ul> <li>Frontend: React 19 app served by nginx on port 80</li> <li>Backend: Node.js/Express API server on port 8000 (proxied through nginx)</li> <li>Database: SQLite for user data and preferences (lightweight, no separate container needed)</li> <li>Transcoding: FFmpeg for real-time video conversion</li> </ul> <p>Development uses Docker Compose with hot reloading for both frontend and backend.</p>"},{"location":"#technology-stack","title":"Technology Stack","text":"<p>Frontend:</p> <ul> <li>React 19 with Babel React Compiler</li> <li>Tailwind CSS for styling</li> <li>Video.js 8 for media playback</li> <li>React Router for navigation</li> <li>Custom theming system</li> </ul> <p>Backend:</p> <ul> <li>Node.js + Express</li> <li>TypeScript (strict mode, ES2020)</li> <li>Prisma ORM + SQLite</li> <li>JWT authentication</li> <li>FFmpeg integration</li> <li>stashapp-api GraphQL client</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li> <p> Install Now</p> <p>Choose your deployment method</p> <p> Installation Options</p> </li> <li> <p> User Guide</p> <p>Learn how to use Peek effectively</p> <p> User Documentation</p> </li> <li> <p> Development</p> <p>Contribute to Peek development</p> <p> Developer Guide</p> </li> <li> <p> Get Help</p> <p>Troubleshooting and support</p> <p> Troubleshooting</p> </li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub Repository: carrotwaxr/peek-stash-browser</li> <li>Issues &amp; Support: GitHub Issues</li> <li>Docker Images: Docker Hub</li> <li>Stash Community: Discord - Ask in #third-party-integrations channel</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<ul> <li>Stash - The amazing media organizer this builds upon</li> <li>React - Frontend framework</li> <li>Express - Backend framework</li> <li>Prisma - Database ORM</li> <li>Video.js - Video player</li> <li>FFmpeg - Video transcoding</li> </ul>"},{"location":"deployment/build-checklist/","title":"Build and Deploy Checklist","text":"<p>This checklist covers the complete process for building and deploying Peek Stash Browser to production.</p>"},{"location":"deployment/build-checklist/#pre-deployment-checklist","title":"Pre-Deployment Checklist","text":"<p>Before building for production, verify:</p> <ul> <li> All tests passing locally</li> <li> Docker Compose working in development mode</li> <li> Environment variables documented in <code>.env.example</code></li> <li> Database migrations tested</li> <li> Production Dockerfile tested locally</li> <li> unRAID template updated with all environment variables</li> <li> Documentation updated (README, deployment guides)</li> </ul>"},{"location":"deployment/build-checklist/#build-production-image","title":"Build Production Image","text":""},{"location":"deployment/build-checklist/#1-navigate-to-project-directory","title":"1. Navigate to Project Directory","text":"<pre><code>cd peek-stash-browser\n</code></pre>"},{"location":"deployment/build-checklist/#2-build-production-image","title":"2. Build Production Image","text":"<pre><code>docker build -f Dockerfile.production -t carrotwaxr/peek-stash-browser:latest .\n</code></pre>"},{"location":"deployment/build-checklist/#3-tag-with-version-optional","title":"3. Tag with Version (Optional)","text":"<p>For versioned releases:</p> <pre><code>docker tag carrotwaxr/peek-stash-browser:latest carrotwaxr/peek-stash-browser:v1.0.0\n</code></pre>"},{"location":"deployment/build-checklist/#4-test-production-image-locally","title":"4. Test Production Image Locally","text":"<pre><code>docker run -d \\\n  --name peek-test \\\n  -p 6969:80 \\\n  -e STASH_URL=\"http://10.0.0.4:9999/graphql\" \\\n  -e STASH_API_KEY=\"your-api-key\" \\\n  -e JWT_SECRET=\"test-secret-string\" \\\n  -e DATABASE_URL=\"file:/app/data/peek-db.db\" \\\n  -e CONFIG_DIR=\"/app/data\" \\\n  -e STASH_INTERNAL_PATH=\"/data\" \\\n  -e STASH_MEDIA_PATH=\"/app/media\" \\\n  -v /path/to/media:/app/media:ro \\\n  -v ./test-data:/app/data \\\n  carrotwaxr/peek-stash-browser:latest\n</code></pre>"},{"location":"deployment/build-checklist/#5-verify-container-started","title":"5. Verify Container Started","text":"<pre><code>docker logs peek-test\n</code></pre> <p>Look for: \"Server is running on http://localhost:8000\"</p>"},{"location":"deployment/build-checklist/#6-test-in-browser","title":"6. Test in Browser","text":"<ol> <li>Open: <code>http://localhost:6969</code></li> <li>Login with <code>admin</code> / <code>admin</code></li> <li>Test core functionality:</li> <li>Browse scenes</li> <li>Play video (direct and transcoded)</li> <li>Search and filter</li> <li>Create playlist</li> </ol>"},{"location":"deployment/build-checklist/#7-cleanup-test-container","title":"7. Cleanup Test Container","text":"<pre><code>docker stop peek-test\ndocker rm peek-test\n</code></pre>"},{"location":"deployment/build-checklist/#push-to-docker-hub","title":"Push to Docker Hub","text":""},{"location":"deployment/build-checklist/#1-login-to-docker-hub","title":"1. Login to Docker Hub","text":"<pre><code>docker login\n</code></pre> <p>Enter credentials: - Username: <code>carrotwaxr</code> - Password: Your Docker Hub access token</p>"},{"location":"deployment/build-checklist/#2-push-latest-tag","title":"2. Push Latest Tag","text":"<pre><code>docker push carrotwaxr/peek-stash-browser:latest\n</code></pre>"},{"location":"deployment/build-checklist/#3-push-version-tag-if-tagged","title":"3. Push Version Tag (If Tagged)","text":"<pre><code>docker push carrotwaxr/peek-stash-browser:v1.0.0\n</code></pre>"},{"location":"deployment/build-checklist/#4-verify-on-docker-hub","title":"4. Verify on Docker Hub","text":"<p>Visit: https://hub.docker.com/r/carrotwaxr/peek-stash-browser</p>"},{"location":"deployment/build-checklist/#deploy-to-unraid","title":"Deploy to unRAID","text":""},{"location":"deployment/build-checklist/#first-time-setup","title":"First-Time Setup","text":"<ol> <li>Ensure unRAID template is in GitHub repo:</li> </ol> <pre><code>git add unraid-template.xml\ngit commit -m \"Update unRAID template with latest environment variables\"\ngit push origin main\n</code></pre> <ol> <li>On unRAID server, download template:</li> </ol> Via SSH/TerminalVia Web Interface <pre><code>cd /boot/config/plugins/dockerMan/templates-user/\nwget https://raw.githubusercontent.com/carrotwaxr/peek-stash-browser/main/unraid-template.xml -O my-peek-stash-browser.xml\n</code></pre> <ol> <li>Go to Docker \u2192 Add Container</li> <li>Click Template repositories at bottom</li> <li>Add: <code>https://github.com/carrotwaxr/peek-stash-browser</code></li> <li>Click Save</li> <li>Select \"Peek-Stash-Browser\" from template dropdown</li> </ol>"},{"location":"deployment/build-checklist/#configuration-steps","title":"Configuration Steps","text":"<p>In unRAID Docker Tab:</p> <ol> <li> <p>Add Container \u2192 Select \"Peek-Stash-Browser\" template</p> </li> <li> <p>Configure Required Settings:</p> </li> <li>Name: <code>Peek-Stash-Browser</code></li> <li>Repository: <code>carrotwaxr/peek-stash-browser:latest</code></li> <li> <p>Web UI Port: <code>6969</code></p> </li> <li> <p>Configure Volume Paths:</p> </li> <li>Media Directory: <code>/mnt/user/videos</code> \u2192 <code>/app/media</code> (read-only)</li> <li> <p>App Data: <code>/mnt/user/appdata/peek-stash-browser</code> \u2192 <code>/app/data</code> (read/write)</p> </li> <li> <p>Configure Environment Variables:    <pre><code>STASH_URL=http://10.0.0.4:9999/graphql\nSTASH_API_KEY=[your-stash-api-key]\nJWT_SECRET=[generate with: openssl rand -hex 32]\nDATABASE_URL=file:/app/data/peek-db.db\nCONFIG_DIR=/app/data\nSTASH_INTERNAL_PATH=/data\nSTASH_MEDIA_PATH=/app/media\nNODE_ENV=production\nSECURE_COOKIES=false\n</code></pre></p> </li> <li> <p>Click Apply to start container</p> </li> <li> <p>Verify Deployment:</p> </li> <li>Check logs for \"Server is running on http://localhost:8000\"</li> <li>Access: <code>http://[unraid-ip]:6969</code></li> <li>Login with <code>admin</code> / <code>admin</code></li> <li>Change password immediately!</li> </ol>"},{"location":"deployment/build-checklist/#update-existing-installation","title":"Update Existing Installation","text":"Via unRAID UIManual Update <ol> <li>Docker tab \u2192 Peek-Stash-Browser container</li> <li>Click Check for Updates</li> <li>If update available, click Update</li> </ol> <pre><code>docker pull carrotwaxr/peek-stash-browser:latest\ndocker stop Peek-Stash-Browser\ndocker rm Peek-Stash-Browser\n# Recreate from template\n</code></pre>"},{"location":"deployment/build-checklist/#verification-tests","title":"Verification Tests","text":"<p>After deployment, verify all functionality:</p> <ul> <li> Container starts without errors</li> <li> Web interface accessible</li> <li> Login works (admin/admin)</li> <li> Stash connection successful (scenes load)</li> <li> Video playback works (direct play)</li> <li> Video playback works (transcoded)</li> <li> Seeking works in transcoded videos</li> <li> Search and filtering work</li> <li> User creation/management works</li> <li> Playlist creation and playback</li> <li> Shuffle and repeat modes</li> </ul>"},{"location":"deployment/build-checklist/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"deployment/build-checklist/#container-wont-start","title":"Container Won't Start","text":"<p>Check logs: <pre><code>docker logs Peek-Stash-Browser\n</code></pre></p> <p>Common issues: - Missing required environment variables - Invalid STASH_URL (not accessible) - Missing or incorrect volume mappings</p>"},{"location":"deployment/build-checklist/#cant-connect-to-stash","title":"Can't Connect to Stash","text":"<p>Test from container: <pre><code>docker exec Peek-Stash-Browser curl http://10.0.0.4:9999/graphql\n</code></pre></p> <p>Verify: - Stash API key is correct - Stash GraphQL endpoint is enabled</p>"},{"location":"deployment/build-checklist/#videos-wont-play","title":"Videos Won't Play","text":"<p>Check path translation: <pre><code>docker exec Peek-Stash-Browser ls -la /app/media\n</code></pre></p> <p>Verify: - <code>STASH_INTERNAL_PATH</code> matches Stash's mount - <code>STASH_MEDIA_PATH</code> matches Peek's mount - Permissions are readable</p>"},{"location":"deployment/build-checklist/#slow-transcoding","title":"Slow Transcoding","text":"<p>Check I/O speed from container: <pre><code>docker exec Peek-Stash-Browser dd if=/app/media/somefile.mp4 of=/dev/null bs=1M count=100\n</code></pre></p> <p>If slow (&lt;50 MB/s): - Media might be on network share - Best performance: local unRAID array/cache</p>"},{"location":"deployment/build-checklist/#rollback-procedure","title":"Rollback Procedure","text":"<p>If deployment fails:</p> <pre><code># 1. Stop new container\ndocker stop Peek-Stash-Browser\ndocker rm Peek-Stash-Browser\n\n# 2. Pull previous version (if tagged)\ndocker pull carrotwaxr/peek-stash-browser:v0.9.0\n\n# 3. Update template to use previous version\n# In unRAID: Edit container, change Repository to include version tag\n\n# 4. Restore database backup (if needed)\ncp /mnt/user/backups/peek-db.db.backup /mnt/user/appdata/peek-stash-browser/peek-db.db\n\n# 5. Recreate container from template\n</code></pre>"},{"location":"deployment/build-checklist/#post-deployment-tasks","title":"Post-Deployment Tasks","text":"<p>After successful deployment:</p> <ul> <li> Update documentation with deployment date</li> <li> Create GitHub release with version tag</li> <li> Update Docker Hub description</li> <li> Post announcement in relevant communities</li> <li> Monitor error logs for first 24 hours</li> <li> Create backup of working configuration</li> </ul>"},{"location":"deployment/build-checklist/#environment-specific-notes","title":"Environment-Specific Notes","text":""},{"location":"deployment/build-checklist/#development-vs-production","title":"Development vs Production","text":"<p>Development (docker-compose):</p> <ul> <li>Uses hot-reload for frontend and backend</li> <li>Mounts source code as volumes</li> <li>May use SMB/CIFS for remote media</li> <li>Multiple containers (frontend, backend)</li> </ul> <p>Production (unRAID):</p> <ul> <li>Single compiled container</li> <li>Nginx serves frontend, proxies backend</li> <li>Local media access (fast I/O)</li> <li>All code bundled in image</li> </ul>"},{"location":"deployment/build-checklist/#performance-expectations","title":"Performance Expectations","text":"<p>Development (WiFi + SMB):</p> <ul> <li>Transcoding speed: 0.12x (slow)</li> <li>Initial buffer: 5-6 minutes for 40 seconds</li> <li>Good for testing, not for real use</li> </ul> <p>Production (unRAID local):</p> <ul> <li>Transcoding speed: 0.8x - 2.0x (real-time or faster)</li> <li>Initial buffer: 30-60 seconds for 40 seconds</li> <li>Smooth playback, excellent user experience</li> </ul>"},{"location":"deployment/build-checklist/#additional-resources","title":"Additional Resources","text":"<ul> <li>Docker Deployment Guide</li> <li>unRAID Deployment Guide</li> <li>Environment Variables Reference</li> <li>Troubleshooting</li> </ul>"},{"location":"deployment/docker/","title":"Docker","text":"<p>Documentation coming soon.</p>"},{"location":"deployment/environment/","title":"Environment","text":"<p>Documentation coming soon.</p>"},{"location":"deployment/unraid/","title":"unRAID Deployment","text":"<p>This guide covers deploying Peek Stash Browser on unRAID systems.</p>"},{"location":"deployment/unraid/#prerequisites","title":"Prerequisites","text":"<p>Before deploying to unRAID, ensure you have:</p> <ul> <li>Existing Stash server running on unRAID (or accessible from unRAID)</li> <li>Stash API key from Settings \u2192 Security \u2192 API Key</li> <li>Media files accessible on unRAID (same location Stash uses)</li> </ul>"},{"location":"deployment/unraid/#installation-methods","title":"Installation Methods","text":""},{"location":"deployment/unraid/#via-community-applications-recommended","title":"Via Community Applications (Recommended)","text":"<p>Easiest Method</p> <p>This is the recommended installation method for unRAID users.</p> <ol> <li>Open unRAID web interface</li> <li>Go to Apps tab</li> <li>Search for \"Peek Stash Browser\"</li> <li>Click Install</li> <li>Configure settings (see Configuration below)</li> <li>Click Apply</li> </ol>"},{"location":"deployment/unraid/#manual-docker-run","title":"Manual Docker Run","text":"<pre><code>docker run -d \\\n  --name=peek-stash-browser \\\n  -p 6969:80 \\\n  -v /mnt/user/media:/app/media:ro \\\n  -v /mnt/user/appdata/peek-stash-browser/data:/app/data \\\n  -v /mnt/user/appdata/peek-stash-browser/tmp:/app/tmp \\\n  -e STASH_URL=\"http://[IP]:9999/graphql\" \\\n  -e STASH_API_KEY=\"your-api-key\" \\\n  carrotwaxr/peek-stash-browser:latest\n</code></pre> <p>Replace <code>[IP]</code> with your Stash server IP address.</p>"},{"location":"deployment/unraid/#configuration","title":"Configuration","text":""},{"location":"deployment/unraid/#port-configuration","title":"Port Configuration","text":"Setting Value Notes Web UI Port <code>6969</code> Or any available port Access URL <code>http://[UNRAID-IP]:6969</code> Replace with your unRAID IP"},{"location":"deployment/unraid/#volume-mappings","title":"Volume Mappings","text":""},{"location":"deployment/unraid/#media-directory","title":"Media Directory","text":"<ul> <li>Container path: <code>/app/media</code></li> <li>Host path: <code>/mnt/user/videos</code> (MUST match Stash's media path)</li> <li>Mode: Read-only</li> </ul>"},{"location":"deployment/unraid/#app-data-directory","title":"App Data Directory","text":"<ul> <li>Container path: <code>/app/data</code></li> <li>Host path: <code>/mnt/user/appdata/peek-stash-browser</code></li> <li>Mode: Read/write</li> </ul>"},{"location":"deployment/unraid/#temporary-files-directory","title":"Temporary Files Directory","text":"<ul> <li>Container path: <code>/app/tmp</code></li> <li>Host path: <code>/mnt/user/appdata/peek-stash-browser/tmp</code></li> <li>Mode: Read/write</li> </ul>"},{"location":"deployment/unraid/#environment-variables","title":"Environment Variables","text":""},{"location":"deployment/unraid/#required","title":"Required","text":"Variable Example Where to Get <code>STASH_URL</code> <code>http://192.168.1.100:9999/graphql</code> Your Stash server URL <code>STASH_API_KEY</code> <code>eyJhbGc...</code> Stash \u2192 Settings \u2192 Security \u2192 API Key"},{"location":"deployment/unraid/#optional-advanced","title":"Optional (Advanced)","text":"Variable Default Description <code>DATABASE_URL</code> <code>file:/app/data/peek-db.db</code> SQLite database location <code>CONFIG_DIR</code> <code>/app/data</code> App configuration directory <code>STASH_INTERNAL_PATH</code> <code>/data</code> Stash's internal Docker path <code>STASH_MEDIA_PATH</code> <code>/app/media</code> Peek's container path for media <code>NODE_ENV</code> <code>production</code> Environment mode <code>SECURE_COOKIES</code> <code>false</code> Set to <code>true</code> if using HTTPS reverse proxy <code>JWT_SECRET</code> Auto-generated Generate with <code>openssl rand -hex 32</code>"},{"location":"deployment/unraid/#path-mapping-configuration","title":"Path Mapping Configuration","text":"<p>Critical for Video Playback</p> <p>Peek needs to translate Stash's internal paths to its own paths for video playback to work.</p>"},{"location":"deployment/unraid/#how-path-mapping-works","title":"How Path Mapping Works","text":"<p>If your Stash setup looks like this:</p> <pre><code>Stash Docker container:\n  - Media volume: /mnt/user/videos:/data\n  - Stash reports paths as: /data/scenes/video.mp4\n</code></pre> <p>Then Peek should be configured as:</p> <pre><code>Peek Docker container:\n  - Media volume: /mnt/user/videos:/app/media  # Same host path as Stash\n  - STASH_INTERNAL_PATH: /data                 # What Stash calls it\n  - STASH_MEDIA_PATH: /app/media               # What Peek calls it\n</code></pre> <p>This allows Peek to translate: - Stash path: <code>/data/scenes/video.mp4</code> - To Peek path: <code>/app/media/scenes/video.mp4</code></p>"},{"location":"deployment/unraid/#common-scenarios","title":"Common Scenarios","text":"Stash and Peek on Same ServerStash on Different Server (NFS/SMB) <pre><code>Media location: /mnt/user/videos\n\nStash config:\n  Volume: /mnt/user/videos:/data\n\nPeek config:\n  Media Directory: /mnt/user/videos\n  Container Path: /app/media\n  STASH_INTERNAL_PATH: /data\n  STASH_MEDIA_PATH: /app/media\n</code></pre> <pre><code>Media location: /mnt/remotes/nas/videos (mounted NFS share)\n\nStash config (on other server):\n  Volume: /mnt/nas/videos:/data\n\nPeek config (on unRAID):\n  Media Directory: /mnt/remotes/nas/videos\n  Container Path: /app/media\n  STASH_INTERNAL_PATH: /data\n  STASH_MEDIA_PATH: /app/media\n</code></pre>"},{"location":"deployment/unraid/#first-access","title":"First Access","text":"<ol> <li>Open browser: <code>http://[UNRAID-IP]:6969</code></li> <li>Default login credentials:</li> <li>Username: <code>admin</code></li> <li>Password: <code>admin</code></li> <li>\u26a0\ufe0f IMPORTANT: Change password immediately after first login!</li> </ol>"},{"location":"deployment/unraid/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/unraid/#container-wont-start","title":"Container Won't Start","text":"<p>Symptoms: Container fails to start or immediately stops</p> <p>Solutions:</p> <ul> <li>Check logs: Docker tab \u2192 Peek-Stash-Browser \u2192 Logs</li> <li>Verify all required environment variables are set</li> <li>Ensure STASH_URL is accessible from container</li> <li>Verify media path exists and is readable</li> <li>Check that port 6969 is not already in use</li> </ul> <p>Test connectivity: <pre><code># From unRAID terminal\ncurl http://your-stash-ip:9999/graphql\n</code></pre></p>"},{"location":"deployment/unraid/#videos-wont-play","title":"Videos Won't Play","text":"<p>Symptoms: Videos fail to load or playback errors</p> <p>Solutions:</p> <ul> <li>Check path mapping configuration (see above)</li> <li>Verify <code>STASH_INTERNAL_PATH</code> matches Stash's Docker mount</li> <li>Ensure media directory is readable (permissions)</li> <li>Check backend logs for path translation errors</li> </ul> <p>Verify media access: <pre><code>docker exec peek-stash-browser ls -la /app/media\n</code></pre></p>"},{"location":"deployment/unraid/#slow-transcoding","title":"Slow Transcoding","text":"<p>Symptoms: Video buffering takes a long time</p> <p>Causes &amp; Solutions:</p> <ul> <li>Network storage: Media over SMB/NFS is slower</li> <li>Solution: Use local unRAID array/cache</li> <li>CPU limitation: Insufficient transcoding power</li> <li>Solution: Allocate 2-4GB RAM, use SSD cache for appdata</li> </ul> <p>Test I/O performance: <pre><code>docker exec peek-stash-browser dd if=/app/media/somefile.mp4 of=/dev/null bs=1M count=100\n</code></pre></p> <p>Expected speed: 50+ MB/s for smooth transcoding</p>"},{"location":"deployment/unraid/#authentication-issues","title":"Authentication Issues","text":"<p>Symptoms: Can't login or session expires immediately</p> <p>Solutions:</p> <ul> <li>Verify <code>JWT_SECRET</code> is set (or allow auto-generation)</li> <li>Clear browser cookies/cache</li> <li>Check if <code>SECURE_COOKIES</code> matches your setup (false for HTTP, true for HTTPS)</li> </ul>"},{"location":"deployment/unraid/#port-conflicts","title":"Port Conflicts","text":"<p>Single Container = No More Port Conflicts</p> <p>The single-container architecture uses only port 6969. No more PostgreSQL port 5432 or backend port 8000 conflicts!</p> <p>If port 6969 is in use, simply choose a different port in the template.</p>"},{"location":"deployment/unraid/#performance-optimization","title":"Performance Optimization","text":""},{"location":"deployment/unraid/#hardware-recommendations","title":"Hardware Recommendations","text":"Resource Minimum Recommended CPU 2 cores 4+ cores for multiple streams RAM 2GB 4GB+ Storage Any SSD cache for appdata Network 100 Mbps Gigabit for 4K content"},{"location":"deployment/unraid/#best-practices","title":"Best Practices","text":"<ol> <li>Use local storage: Media files on unRAID array/cache (not network shares)</li> <li>Use SSD cache for appdata if possible</li> <li>Allocate sufficient RAM: 2-4GB recommended for transcoding</li> <li>Enable hardware acceleration (future enhancement):    <pre><code>Extra Parameters: --device /dev/dri:/dev/dri\n</code></pre></li> </ol>"},{"location":"deployment/unraid/#updating","title":"Updating","text":""},{"location":"deployment/unraid/#automatic-update-via-unraid","title":"Automatic Update via unRAID","text":"<ol> <li>Docker tab \u2192 Peek-Stash-Browser</li> <li>Click Check for Updates</li> <li>If update available, click Update</li> <li>Container will restart automatically</li> </ol>"},{"location":"deployment/unraid/#manual-update","title":"Manual Update","text":"<pre><code># Pull latest image\ndocker pull carrotwaxr/peek-stash-browser:latest\n\n# Stop and remove old container\ndocker stop peek-stash-browser\ndocker rm peek-stash-browser\n\n# Recreate from template with same settings\n</code></pre>"},{"location":"deployment/unraid/#backup-recovery","title":"Backup &amp; Recovery","text":""},{"location":"deployment/unraid/#what-to-backup","title":"What to Backup","text":"<ul> <li>Database: <code>/mnt/user/appdata/peek-stash-browser/peek-db.db</code></li> <li>Configuration: unRAID template settings (export from Docker tab)</li> </ul>"},{"location":"deployment/unraid/#backup-procedure","title":"Backup Procedure","text":"<pre><code># 1. Stop container\ndocker stop peek-stash-browser\n\n# 2. Copy appdata to backup location\ncp -r /mnt/user/appdata/peek-stash-browser /mnt/user/backups/peek-backup-$(date +%Y%m%d)\n\n# 3. Restart container\ndocker start peek-stash-browser\n</code></pre>"},{"location":"deployment/unraid/#restore-procedure","title":"Restore Procedure","text":"<pre><code># 1. Stop container\ndocker stop peek-stash-browser\n\n# 2. Restore from backup\ncp -r /mnt/user/backups/peek-backup-YYYYMMDD/* /mnt/user/appdata/peek-stash-browser/\n\n# 3. Restart container\ndocker start peek-stash-browser\n</code></pre>"},{"location":"deployment/unraid/#security-recommendations","title":"Security Recommendations","text":"<p>Change Default Password</p> <p>The default admin password is well-known. Change it immediately!</p> <ol> <li>Change default admin password immediately</li> <li>Use strong JWT_SECRET: Generate with <code>openssl rand -hex 32</code></li> <li>Don't expose directly to internet: Use VPN or reverse proxy</li> <li>If using reverse proxy:</li> <li>Set <code>SECURE_COOKIES=true</code></li> <li>Configure HTTPS properly</li> <li>Use trusted certificates</li> </ol>"},{"location":"deployment/unraid/#support","title":"Support","text":"<ul> <li>Documentation: https://carrotwaxr.github.io/peek-stash-browser</li> <li>Issues: GitHub Issues</li> <li>Community: Stash Discord - #third-party-integrations channel</li> </ul>"},{"location":"deployment/unraid/#version-information","title":"Version Information","text":"<ul> <li>Template Version: 1.0.0</li> <li>Last Updated: 2025-01-15</li> <li>Compatible with: unRAID 6.10+</li> </ul>"},{"location":"development/api-reference/","title":"API Reference","text":"<p>This document provides a complete reference for the Peek Stash Browser REST API, including authentication, library endpoints, and video streaming.</p>"},{"location":"development/api-reference/#base-url","title":"Base URL","text":"<p>All API endpoints are prefixed with <code>/api</code> in production:</p> <pre><code>Production:  http://your-server:6969/api\nDevelopment: http://localhost:8000/api\n</code></pre>"},{"location":"development/api-reference/#authentication","title":"Authentication","text":""},{"location":"development/api-reference/#post-apiauthlogin","title":"POST /api/auth/login","text":"<p>Authenticate a user and receive a JWT token.</p> <p>Request Body: <pre><code>{\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin\"\n}\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": \"clxxx1234\",\n    \"email\": \"admin@example.com\",\n    \"role\": \"ADMIN\",\n    \"createdAt\": \"2025-01-01T00:00:00.000Z\"\n  }\n}\n</code></pre></p> <p>Error Responses: - <code>400 Bad Request</code>: Missing email or password - <code>401 Unauthorized</code>: Invalid credentials</p> <p>Example: <pre><code>curl -X POST http://localhost:8000/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"admin@example.com\",\"password\":\"admin\"}'\n</code></pre></p>"},{"location":"development/api-reference/#post-apiauthlogout","title":"POST /api/auth/logout","text":"<p>End the current user session.</p> <p>Headers: <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"message\": \"Logged out successfully\"\n}\n</code></pre></p> <p>Example: <pre><code>curl -X POST http://localhost:8000/api/auth/logout \\\n  -H \"Authorization: Bearer &lt;token&gt;\"\n</code></pre></p>"},{"location":"development/api-reference/#post-apiauthregister","title":"POST /api/auth/register","text":"<p>Create a new user account (Admin only).</p> <p>Headers: <pre><code>Authorization: Bearer &lt;admin-token&gt;\n</code></pre></p> <p>Request Body: <pre><code>{\n  \"email\": \"newuser@example.com\",\n  \"password\": \"securepassword\",\n  \"role\": \"USER\"\n}\n</code></pre></p> <p>Response (201 Created): <pre><code>{\n  \"user\": {\n    \"id\": \"clxxx5678\",\n    \"email\": \"newuser@example.com\",\n    \"role\": \"USER\",\n    \"createdAt\": \"2025-01-15T10:00:00.000Z\"\n  }\n}\n</code></pre></p> <p>Error Responses: - <code>400 Bad Request</code>: Invalid input or email already exists - <code>403 Forbidden</code>: Not an admin user</p>"},{"location":"development/api-reference/#library-endpoints","title":"Library Endpoints","text":"<p>All library endpoints proxy requests to Stash's GraphQL API and require authentication.</p>"},{"location":"development/api-reference/#post-apilibraryscenes","title":"POST /api/library/scenes","text":"<p>Search and filter scenes from Stash library.</p> <p>Headers: <pre><code>Authorization: Bearer &lt;token&gt;\nContent-Type: application/json\n</code></pre></p> <p>Request Body: <pre><code>{\n  \"filter\": {\n    \"page\": 1,\n    \"per_page\": 25,\n    \"sort\": \"date\",\n    \"direction\": \"DESC\"\n  },\n  \"scene_filter\": {\n    \"rating100\": {\n      \"modifier\": \"GREATER_THAN\",\n      \"value\": 80\n    },\n    \"performer_favorite\": true,\n    \"duration\": {\n      \"modifier\": \"GREATER_THAN\",\n      \"value\": 300\n    },\n    \"has_markers\": \"true\"\n  }\n}\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"count\": 1234,\n  \"scenes\": [\n    {\n      \"id\": \"12345\",\n      \"title\": \"Example Scene\",\n      \"date\": \"2025-01-15\",\n      \"rating100\": 85,\n      \"duration\": 1800,\n      \"paths\": {\n        \"screenshot\": \"http://stash:9999/scene/12345/screenshot\",\n        \"preview\": \"http://stash:9999/scene/12345/preview\"\n      },\n      \"files\": [\n        {\n          \"path\": \"/data/videos/scene.mp4\",\n          \"size\": \"1234567890\",\n          \"duration\": 1800,\n          \"video_codec\": \"h264\",\n          \"audio_codec\": \"aac\"\n        }\n      ],\n      \"performers\": [\n        {\n          \"id\": \"67890\",\n          \"name\": \"Performer Name\",\n          \"favorite\": true\n        }\n      ],\n      \"tags\": [\n        {\n          \"id\": \"111\",\n          \"name\": \"Tag Name\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre></p> <p>Filter Options:</p> Parameter Type Description <code>filter.page</code> number Page number (1-indexed) <code>filter.per_page</code> number Results per page (default: 25) <code>filter.sort</code> string Sort field: <code>title</code>, <code>date</code>, <code>rating</code>, <code>duration</code> <code>filter.direction</code> string Sort direction: <code>ASC</code>, <code>DESC</code> <code>filter.q</code> string Search query <code>scene_filter.rating100</code> object Rating filter (0-100) with modifier <code>scene_filter.duration</code> object Duration filter (seconds) with modifier <code>scene_filter.performer_favorite</code> boolean Filter by favorite performers <code>scene_filter.has_markers</code> string Filter scenes with markers <p>Modifiers: - <code>EQUALS</code> - <code>NOT_EQUALS</code> - <code>GREATER_THAN</code> - <code>LESS_THAN</code> - <code>BETWEEN</code> (requires <code>value</code> and <code>value2</code>) - <code>INCLUDES</code> - <code>EXCLUDES</code></p> <p>Example: <pre><code>curl -X POST http://localhost:8000/api/library/scenes \\\n  -H \"Authorization: Bearer &lt;token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"filter\": {\n      \"page\": 1,\n      \"per_page\": 25,\n      \"sort\": \"date\",\n      \"direction\": \"DESC\"\n    }\n  }'\n</code></pre></p>"},{"location":"development/api-reference/#post-apilibraryperformers","title":"POST /api/library/performers","text":"<p>Search and filter performers from Stash library.</p> <p>Request Body: <pre><code>{\n  \"filter\": {\n    \"page\": 1,\n    \"per_page\": 50,\n    \"sort\": \"name\",\n    \"direction\": \"ASC\"\n  },\n  \"performer_filter\": {\n    \"favorite\": true,\n    \"gender\": \"FEMALE\",\n    \"age\": {\n      \"modifier\": \"GREATER_THAN\",\n      \"value\": 21\n    }\n  }\n}\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"count\": 456,\n  \"performers\": [\n    {\n      \"id\": \"67890\",\n      \"name\": \"Performer Name\",\n      \"gender\": \"FEMALE\",\n      \"birthdate\": \"1995-06-15\",\n      \"age\": 29,\n      \"favorite\": true,\n      \"image_path\": \"http://stash:9999/performer/67890/image\",\n      \"scene_count\": 42,\n      \"tags\": [\n        {\n          \"id\": \"222\",\n          \"name\": \"Tag Name\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre></p>"},{"location":"development/api-reference/#post-apilibrarystudios","title":"POST /api/library/studios","text":"<p>Search and filter studios from Stash library.</p> <p>Request Body: <pre><code>{\n  \"filter\": {\n    \"q\": \"studio search\",\n    \"per_page\": 25\n  },\n  \"studio_filter\": {\n    \"name\": {\n      \"modifier\": \"INCLUDES\",\n      \"value\": \"Productions\"\n    },\n    \"scene_count\": {\n      \"modifier\": \"GREATER_THAN\",\n      \"value\": 10\n    }\n  }\n}\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"count\": 123,\n  \"studios\": [\n    {\n      \"id\": \"333\",\n      \"name\": \"Studio Name\",\n      \"url\": \"https://studio.example.com\",\n      \"image_path\": \"http://stash:9999/studio/333/image\",\n      \"scene_count\": 156,\n      \"parent_studio\": null\n    }\n  ]\n}\n</code></pre></p>"},{"location":"development/api-reference/#post-apilibrarytags","title":"POST /api/library/tags","text":"<p>Search and filter tags from Stash library.</p> <p>Request Body: <pre><code>{\n  \"filter\": {\n    \"sort\": \"scene_count\",\n    \"direction\": \"DESC\"\n  },\n  \"tag_filter\": {\n    \"scene_count\": {\n      \"modifier\": \"GREATER_THAN\",\n      \"value\": 5\n    },\n    \"name\": {\n      \"modifier\": \"MATCHES_REGEX\",\n      \"value\": \"^(category).*\"\n    }\n  }\n}\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"count\": 789,\n  \"tags\": [\n    {\n      \"id\": \"444\",\n      \"name\": \"Tag Name\",\n      \"scene_count\": 234,\n      \"image_path\": \"http://stash:9999/tag/444/image\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"development/api-reference/#video-streaming-endpoints","title":"Video Streaming Endpoints","text":"<p>Video endpoints handle HLS transcoding and streaming. No authentication required (sessions are validated internally).</p>"},{"location":"development/api-reference/#post-apivideosession","title":"POST /api/video/session","text":"<p>Create a new transcoding session for video playback.</p> <p>Request Body: <pre><code>{\n  \"sceneId\": \"12345\",\n  \"startTime\": 120,\n  \"qualities\": [\"720p\", \"480p\", \"360p\"]\n}\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"sessionId\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"masterPlaylistUrl\": \"/api/video/session/550e8400-e29b-41d4-a716-446655440000/master.m3u8\",\n  \"qualities\": [\"720p\", \"480p\", \"360p\"]\n}\n</code></pre></p> <p>Error Responses: - <code>400 Bad Request</code>: Missing sceneId or invalid parameters - <code>404 Not Found</code>: Scene not found in Stash - <code>500 Internal Server Error</code>: FFmpeg process failed to start</p> <p>Example: <pre><code>curl -X POST http://localhost:8000/api/video/session \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"sceneId\": \"12345\",\n    \"startTime\": 0,\n    \"qualities\": [\"720p\", \"480p\", \"360p\"]\n  }'\n</code></pre></p>"},{"location":"development/api-reference/#get-apivideosessionsessionidmasterm3u8","title":"GET /api/video/session/:sessionId/master.m3u8","text":"<p>Get the HLS master playlist for a transcoding session.</p> <p>Parameters: - <code>sessionId</code>: Transcoding session UUID</p> <p>Response (200 OK): <pre><code>#EXTM3U\n#EXT-X-VERSION:6\n#EXT-X-STREAM-INF:BANDWIDTH=2500000,RESOLUTION=1280x720\n720p/playlist.m3u8\n#EXT-X-STREAM-INF:BANDWIDTH=1000000,RESOLUTION=854x480\n480p/playlist.m3u8\n#EXT-X-STREAM-INF:BANDWIDTH=500000,RESOLUTION=640x360\n360p/playlist.m3u8\n</code></pre></p> <p>Error Responses: - <code>404 Not Found</code>: Session not found or expired</p> <p>Example: <pre><code>curl http://localhost:8000/api/video/session/550e8400.../master.m3u8\n</code></pre></p>"},{"location":"development/api-reference/#get-apivideosessionsessionidqualityplaylistm3u8","title":"GET /api/video/session/:sessionId/:quality/playlist.m3u8","text":"<p>Get the HLS quality-specific playlist.</p> <p>Parameters: - <code>sessionId</code>: Transcoding session UUID - <code>quality</code>: Quality level (<code>720p</code>, <code>480p</code>, <code>360p</code>)</p> <p>Response (200 OK): <pre><code>#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-TARGETDURATION:4\n#EXT-X-MEDIA-SEQUENCE:0\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXTINF:4.000000,\nsegment_000.ts\n#EXTINF:4.000000,\nsegment_001.ts\n#EXT-X-ENDLIST\n</code></pre></p> <p>Error Responses: - <code>404 Not Found</code>: Session or quality not found</p>"},{"location":"development/api-reference/#get-apivideosessionsessionidqualitysegment_numts","title":"GET /api/video/session/:sessionId/:quality/segment_:num.ts","text":"<p>Get a specific video segment.</p> <p>Parameters: - <code>sessionId</code>: Transcoding session UUID - <code>quality</code>: Quality level (<code>720p</code>, <code>480p</code>, <code>360p</code>) - <code>num</code>: Segment number (000, 001, 002, etc.)</p> <p>Response (200 OK): - Content-Type: <code>video/MP2T</code> - Binary MPEG-TS segment data</p> <p>Error Responses: - <code>404 Not Found</code>: Session, quality, or segment not found - <code>503 Service Unavailable</code>: Segment not yet transcoded (retry)</p> <p>Example: <pre><code>curl http://localhost:8000/api/video/session/550e8400.../720p/segment_000.ts \\\n  -o segment_000.ts\n</code></pre></p>"},{"location":"development/api-reference/#delete-apivideosessionsessionid","title":"DELETE /api/video/session/:sessionId","text":"<p>Manually terminate a transcoding session and clean up resources.</p> <p>Parameters: - <code>sessionId</code>: Transcoding session UUID</p> <p>Response (200 OK): <pre><code>{\n  \"message\": \"Session terminated successfully\",\n  \"sessionId\": \"550e8400-e29b-41d4-a716-446655440000\"\n}\n</code></pre></p> <p>Error Responses: - <code>404 Not Found</code>: Session not found</p>"},{"location":"development/api-reference/#health-check","title":"Health Check","text":""},{"location":"development/api-reference/#get-apihealth","title":"GET /api/health","text":"<p>Check the health status of the Peek server and its dependencies.</p> <p>Response (200 OK): <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2025-10-17T12:00:00.000Z\",\n  \"services\": {\n    \"database\": \"healthy\",\n    \"stash\": \"healthy\"\n  }\n}\n</code></pre></p> <p>Response (503 Service Unavailable): <pre><code>{\n  \"status\": \"unhealthy\",\n  \"timestamp\": \"2025-10-17T12:00:00.000Z\",\n  \"services\": {\n    \"database\": \"healthy\",\n    \"stash\": \"error\"\n  },\n  \"error\": \"Failed to connect to Stash GraphQL API\"\n}\n</code></pre></p> <p>Example: <pre><code>curl http://localhost:8000/api/health\n</code></pre></p>"},{"location":"development/api-reference/#error-handling","title":"Error Handling","text":"<p>All API endpoints follow consistent error response format:</p> <pre><code>{\n  \"error\": \"Error message\",\n  \"details\": \"Additional error details (development only)\"\n}\n</code></pre>"},{"location":"development/api-reference/#common-http-status-codes","title":"Common HTTP Status Codes","text":"Code Meaning Usage <code>200 OK</code> Success Successful request <code>201 Created</code> Resource created User registration <code>400 Bad Request</code> Invalid input Validation errors <code>401 Unauthorized</code> Authentication required Missing or invalid token <code>403 Forbidden</code> Insufficient permissions Non-admin accessing admin endpoint <code>404 Not Found</code> Resource not found Session, scene, or user not found <code>500 Internal Server Error</code> Server error Unexpected server failure <code>503 Service Unavailable</code> Service temporarily unavailable FFmpeg process failed, Stash unreachable"},{"location":"development/api-reference/#rate-limiting","title":"Rate Limiting","text":"<p>Not Currently Implemented</p> <p>Rate limiting is planned for future releases. Current implementation has no rate limits.</p> <p>Planned limits: - Authentication endpoints: 10 requests per minute per IP - API endpoints: 100 requests per minute per user - Video segments: No limit (streaming)</p>"},{"location":"development/api-reference/#cors-configuration","title":"CORS Configuration","text":"<p>Development: - Allowed origins: <code>http://localhost:5173</code>, <code>http://localhost:6969</code> - Credentials: Allowed</p> <p>Production: - Allowed origins: Same origin only - Credentials: Allowed</p>"},{"location":"development/api-reference/#websocket-support","title":"WebSocket Support","text":"<p>Not Currently Implemented</p> <p>WebSocket support for real-time updates is planned for future releases.</p>"},{"location":"development/api-reference/#next-steps","title":"Next Steps","text":"<ul> <li>Video System - Video transcoding details</li> <li>Testing Guide - API testing strategies</li> <li>Architecture - System overview</li> </ul>"},{"location":"development/architecture/","title":"Architecture Overview","text":"<p>This document describes the technical architecture of Peek Stash Browser, including system components, technology stack, and data flow.</p>"},{"location":"development/architecture/#system-components","title":"System Components","text":""},{"location":"development/architecture/#development-architecture","title":"Development Architecture","text":"<p>In development mode, Peek runs as separate frontend and backend containers with hot reloading enabled:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   React Client  \u2502\u2500\u2500\u2500\u2500\u2502  Node.js Server  \u2502\u2500\u2500\u2500\u2500\u2502  Stash GraphQL  \u2502\n\u2502  (Vite HMR)     \u2502    \u2502   (nodemon)      \u2502    \u2502     (API)       \u2502\n\u2502   Port 5173     \u2502    \u2502   Port 8000      \u2502    \u2502   Port 9999     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                        \u2502\n         \u2502              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502              \u2502     SQLite      \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502   Database      \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n                        \u2502 (Hot Reloading) \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                        \u2502     FFmpeg      \u2502\n                        \u2502   Transcoding   \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Key Features: - Frontend: Vite dev server with Hot Module Replacement (HMR) - Backend: Nodemon for automatic server restarts on code changes - Database: SQLite with persistence across restarts - Video: FFmpeg for real-time HLS transcoding</p>"},{"location":"development/architecture/#production-architecture","title":"Production Architecture","text":"<p>In production, Peek runs as a single Docker container with Nginx serving the frontend and proxying API requests to the backend:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Docker Container                \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u2502     nginx       \u2502\u2500\u2500\u2502  Node.js Server  \u2502\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2502  Stash GraphQL  \u2502\n\u2502  \u2502 (Static Files)  \u2502  \u2502   (Express API)  \u2502   \u2502    \u2502     (API)       \u2502\n\u2502  \u2502   Port 80       \u2502  \u2502   Port 8000      \u2502   \u2502    \u2502   Port 9999     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502           \u2502                      \u2502            \u2502\n\u2502           \u2502            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502           \u2502            \u2502     SQLite      \u2502    \u2502\n\u2502           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502   Database      \u2502\u2500\u2500\u2500\u2500\u2502\n\u2502                        \u2502   (Embedded)    \u2502    \u2502\n\u2502                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502                        \u2502     FFmpeg      \u2502    \u2502\n\u2502                        \u2502   Transcoding   \u2502    \u2502\n\u2502                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Key Features: - Single container for simplified deployment - Nginx serves static files and proxies API requests - SQLite embedded database (no separate container) - FFmpeg for video transcoding</p>"},{"location":"development/architecture/#technology-stack","title":"Technology Stack","text":""},{"location":"development/architecture/#frontend-stack","title":"Frontend Stack","text":"Technology Version Purpose React 19 UI framework with Hooks API Vite 6 Build tool and dev server Tailwind CSS 3 Utility-first CSS framework Video.js 8 HTML5 video player for HLS streaming React Router 6 Client-side routing Axios 1.x HTTP client <p>Frontend Features: - Custom theming system with dark/light modes - Responsive grid layouts for scenes/performers - Lazy loading and code splitting for optimal performance - Custom React hooks for data fetching and state management</p>"},{"location":"development/architecture/#backend-stack","title":"Backend Stack","text":"Technology Version Purpose Node.js 18+ JavaScript runtime Express 4 Web framework TypeScript 5 Type safety and developer experience Prisma 6 ORM and database toolkit SQLite 3 Embedded database JWT 9 Authentication tokens FFmpeg 6+ Video transcoding <p>Backend Features: - RESTful API with JWT authentication - GraphQL client for Stash integration (stashapp-api) - Session-based FFmpeg transcoding management - Prisma schema migrations</p>"},{"location":"development/architecture/#infrastructure","title":"Infrastructure","text":"<p>Development: - Docker Compose with hot reloading for frontend and backend - Volume mounts for source code (live updates) - SQLite database with persistent volume</p> <p>Production: - Single-container deployment with multi-stage Docker build - Nginx reverse proxy configuration - Health checks and monitoring endpoints - GitHub Actions CI/CD pipeline</p>"},{"location":"development/architecture/#project-structure","title":"Project Structure","text":"<pre><code>peek-stash-browser/\n\u251c\u2500\u2500 client/                 # React frontend application\n\u2502   \u251c\u2500\u2500 public/            # Static assets (favicon, logos)\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 components/    # React components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pages/    # Page-level components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 scene-search/  # Scene grid and search UI\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ui/       # Reusable UI components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 video-player/  # Video player components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 branding/ # Logo and branding\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 icons/    # Icon components\n\u2502   \u2502   \u251c\u2500\u2500 hooks/        # Custom React hooks\n\u2502   \u2502   \u251c\u2500\u2500 services/     # API client services\n\u2502   \u2502   \u251c\u2500\u2500 utils/        # Utility functions\n\u2502   \u2502   \u251c\u2500\u2500 themes/       # Theme configuration\n\u2502   \u2502   \u2514\u2500\u2500 contexts/     # React contexts (Auth, Theme)\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 vite.config.js\n\u251c\u2500\u2500 server/                # Node.js backend application\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 controllers/   # Route controllers\n\u2502   \u2502   \u251c\u2500\u2500 middleware/    # Express middleware\n\u2502   \u2502   \u251c\u2500\u2500 routes/        # API routes\n\u2502   \u2502   \u251c\u2500\u2500 services/      # Business logic services\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 TranscodingManager.ts  # FFmpeg management\n\u2502   \u2502   \u251c\u2500\u2500 utils/         # Utility functions\n\u2502   \u2502   \u2514\u2500\u2500 types/         # TypeScript type definitions\n\u2502   \u251c\u2500\u2500 prisma/           # Database schema and migrations\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 docs/                  # MkDocs documentation\n\u251c\u2500\u2500 .github/workflows/     # CI/CD pipelines\n\u251c\u2500\u2500 docker-compose.yml     # Development environment\n\u2514\u2500\u2500 Dockerfile.production  # Production build\n</code></pre>"},{"location":"development/architecture/#component-architecture","title":"Component Architecture","text":""},{"location":"development/architecture/#frontend-components","title":"Frontend Components","text":"<p>Component Hierarchy:</p> <pre><code>App (Router, Auth, Theme)\n\u251c\u2500\u2500 Layout\n\u2502   \u251c\u2500\u2500 Navigation\n\u2502   \u2514\u2500\u2500 Page Content\n\u2502       \u251c\u2500\u2500 Home (Dashboard)\n\u2502       \u251c\u2500\u2500 Scenes (Scene Grid + Filters)\n\u2502       \u251c\u2500\u2500 Scene Detail (Video Player)\n\u2502       \u251c\u2500\u2500 Performers (Grid + Filters)\n\u2502       \u251c\u2500\u2500 Studios (Grid + Filters)\n\u2502       \u251c\u2500\u2500 Tags (Grid + Filters)\n\u2502       \u2514\u2500\u2500 Settings (User Preferences)\n\u2514\u2500\u2500 Common Components\n    \u251c\u2500\u2500 PageHeader\n    \u251c\u2500\u2500 LoadingSpinner\n    \u251c\u2500\u2500 FilterControls\n    \u251c\u2500\u2500 Pagination\n    \u2514\u2500\u2500 ErrorMessage\n</code></pre> <p>Key Components:</p> Component Location Purpose <code>App.jsx</code> <code>src/App.jsx</code> Root component with routing <code>Layout.jsx</code> <code>src/components/Layout.jsx</code> Page layout wrapper <code>Navigation.jsx</code> <code>src/components/Navigation.jsx</code> Navigation bar <code>SceneSearch.jsx</code> <code>src/components/scene-search/</code> Scene grid with filtering <code>VideoPlayer.jsx</code> <code>src/components/video-player/</code> Video.js player component <code>FilterControls.jsx</code> <code>src/components/ui/</code> Reusable filter UI <p>Custom Hooks:</p> Hook Location Purpose <code>useApi.js</code> <code>src/hooks/</code> Generic API data fetching <code>useAuth.js</code> <code>src/hooks/</code> Authentication state management <code>useLibrary.js</code> <code>src/hooks/</code> Stash library integration <code>useSortAndFilter.js</code> <code>src/hooks/</code> Filtering and sorting logic"},{"location":"development/architecture/#backend-architecture","title":"Backend Architecture","text":"<p>API Routes:</p> <pre><code>/api\n\u251c\u2500\u2500 /auth\n\u2502   \u251c\u2500\u2500 POST /login      # Authenticate user\n\u2502   \u251c\u2500\u2500 POST /logout     # End session\n\u2502   \u2514\u2500\u2500 POST /register   # Create new user\n\u251c\u2500\u2500 /library\n\u2502   \u251c\u2500\u2500 POST /scenes     # Search/filter scenes\n\u2502   \u251c\u2500\u2500 POST /performers # Search/filter performers\n\u2502   \u251c\u2500\u2500 POST /studios    # Search/filter studios\n\u2502   \u2514\u2500\u2500 POST /tags       # Search/filter tags\n\u251c\u2500\u2500 /video\n\u2502   \u251c\u2500\u2500 GET  /session/:sessionId/master.m3u8  # HLS master playlist\n\u2502   \u251c\u2500\u2500 GET  /session/:sessionId/:quality/playlist.m3u8  # Quality playlist\n\u2502   \u2514\u2500\u2500 GET  /session/:sessionId/:quality/segment_:num.ts  # Video segment\n\u2514\u2500\u2500 /health              # Health check endpoint\n</code></pre> <p>Controllers:</p> Controller Location Purpose <code>auth.js</code> <code>src/controllers/</code> Authentication endpoints <code>library.js</code> <code>src/controllers/</code> Stash library proxying <code>video.js</code> <code>src/controllers/</code> Video streaming and transcoding <p>Services:</p> Service Location Purpose <code>TranscodingManager.ts</code> <code>src/services/</code> FFmpeg session management <code>stash.js</code> <code>src/services/</code> Stash GraphQL API client"},{"location":"development/architecture/#database-schema","title":"Database Schema","text":""},{"location":"development/architecture/#user-model","title":"User Model","text":"<pre><code>model User {\n  id        String   @id @default(cuid())\n  email     String   @unique\n  password  String   # Bcrypt hashed\n  role      Role     @default(USER)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nenum Role {\n  ADMIN\n  USER\n}\n</code></pre> <p>Future Models (Planned): - Playlist - PlaylistItem - UserPreferences - WatchHistory</p>"},{"location":"development/architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"development/architecture/#authentication","title":"Authentication","text":"<ul> <li>JWT-based authentication with HttpOnly cookies</li> <li>Bcrypt password hashing (10 rounds)</li> <li>Role-based access control (Admin/User roles)</li> <li>Token expiration (24 hours, configurable)</li> </ul>"},{"location":"development/architecture/#authorization","title":"Authorization","text":"<ul> <li>Middleware-based auth checks on protected routes</li> <li>User ownership validation for user-specific resources</li> <li>Admin-only endpoints for user management</li> </ul>"},{"location":"development/architecture/#file-security","title":"File Security","text":"<ul> <li>Path sanitization to prevent directory traversal</li> <li>Read-only media mounts in production</li> <li>Temporary file cleanup after transcoding sessions</li> <li>Session isolation (one user can't access another's session)</li> </ul>"},{"location":"development/architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"development/architecture/#frontend-optimization","title":"Frontend Optimization","text":"<ul> <li>Code splitting: All page components lazy-loaded</li> <li>Bundle optimization: Vendor chunks for React, Video.js, UI libraries</li> <li>Image lazy loading: Native <code>loading=\"lazy\"</code> attribute</li> <li>Memoization: React.memo and useMemo for expensive computations</li> </ul>"},{"location":"development/architecture/#backend-optimization","title":"Backend Optimization","text":"<ul> <li>Session reuse: Reuse transcoding sessions when seeking nearby</li> <li>Segment caching: Keep transcoded segments until session cleanup</li> <li>Database indexing: Indexes on frequently queried fields</li> <li>Connection pooling: Prisma connection pool for database</li> </ul>"},{"location":"development/architecture/#video-transcoding","title":"Video Transcoding","text":"<ul> <li>Quality presets: 720p, 480p, 360p with optimized bitrates</li> <li>Fast start encoding: <code>-movflags +faststart</code> for MP4</li> <li>HLS segmentation: 4-second segments for smooth playback</li> <li>Smart seeking: FFmpeg <code>-ss</code> before <code>-i</code> for efficient seeking</li> </ul>"},{"location":"development/architecture/#monitoring-and-health-checks","title":"Monitoring and Health Checks","text":""},{"location":"development/architecture/#health-check-endpoint","title":"Health Check Endpoint","text":"<pre><code>GET /api/health\n\nResponse:\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2025-10-17T12:00:00Z\",\n  \"services\": {\n    \"database\": \"healthy\",\n    \"stash\": \"healthy\"\n  }\n}\n</code></pre>"},{"location":"development/architecture/#logging","title":"Logging","text":"<ul> <li>Winston logger for structured backend logging</li> <li>Video.js log level: Set to <code>warn</code> to reduce console spam</li> <li>FFmpeg output parsing: Error detection and logging</li> </ul>"},{"location":"development/architecture/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"development/architecture/#current-limitations","title":"Current Limitations","text":"<ul> <li>Single-server architecture: No horizontal scaling</li> <li>Local file storage: Media must be accessible on same server</li> <li>In-memory sessions: Sessions lost on server restart</li> </ul>"},{"location":"development/architecture/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>Redis session storage: Persist sessions across restarts</li> <li>CDN integration: Serve static files and HLS segments from CDN</li> <li>Database migration: PostgreSQL for multi-server deployments</li> <li>Load balancing: Support multiple backend instances</li> </ul>"},{"location":"development/architecture/#next-steps","title":"Next Steps","text":"<ul> <li>Video System Details</li> <li>API Reference</li> <li>Testing Guide</li> </ul>"},{"location":"development/contributing/","title":"Contributing to Peek Stash Browser","text":"<p>Thank you for your interest in contributing to Peek! This guide will help you get started with contributing code, documentation, and bug reports.</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#1-fork-and-clone","title":"1. Fork and Clone","text":"<pre><code>git clone https://github.com/your-username/peek-stash-browser.git\ncd peek-stash-browser\ngit remote add upstream https://github.com/carrotwaxr/peek-stash-browser.git\n</code></pre>"},{"location":"development/contributing/#2-set-up-development-environment","title":"2. Set Up Development Environment","text":"<p>Follow the Development Setup guide to configure your local environment:</p> <pre><code># Copy environment file\ncp .env.example .env\n\n# Edit .env with your Stash server settings\n# Start development environment\ndocker-compose up -d\n</code></pre>"},{"location":"development/contributing/#3-create-feature-branch","title":"3. Create Feature Branch","text":"<pre><code>git checkout -b feature/your-feature-name\n</code></pre>"},{"location":"development/contributing/#code-contributions","title":"Code Contributions","text":""},{"location":"development/contributing/#before-you-start","title":"Before You Start","text":"<ul> <li>Check existing issues: Look for open issues or create one to discuss your changes</li> <li>Keep it focused: One feature or fix per pull request</li> <li>Follow conventions: Match the existing code style and patterns</li> </ul>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Make your changes:    <pre><code># Frontend changes\ncd client &amp;&amp; npm run dev\n\n# Backend changes\ncd server &amp;&amp; npm run dev\n</code></pre></p> </li> <li> <p>Write tests:    <pre><code># Frontend tests\ncd client &amp;&amp; npm test\n\n# Backend tests\ncd server &amp;&amp; npm test\n</code></pre></p> </li> <li> <p>Run linters:    <pre><code># Frontend linting\ncd client &amp;&amp; npm run lint\n\n# Backend linting\ncd server &amp;&amp; npm run lint\n</code></pre></p> </li> <li> <p>Test in browser:</p> </li> <li>Open <code>http://localhost:6969</code></li> <li>Test your changes thoroughly</li> <li>Check for console errors</li> </ol>"},{"location":"development/contributing/#code-style-guidelines","title":"Code Style Guidelines","text":""},{"location":"development/contributing/#typescriptjavascript","title":"TypeScript/JavaScript","text":"<ul> <li>Use TypeScript strict mode for backend code</li> <li>Prefer functional components with hooks for React</li> <li>Use meaningful variable names: <code>sceneId</code> not <code>sid</code></li> <li>Add JSDoc comments for complex functions</li> <li>Avoid <code>any</code> types without justification</li> </ul> <p>Example: <pre><code>/**\n * Translate Stash's internal Docker path to Peek's mount path\n * @param stashPath - Path reported by Stash API\n * @returns Translated path accessible by Peek\n */\nexport function translateStashPath(stashPath: string): string {\n  const internalPath = process.env.STASH_INTERNAL_PATH || '/data';\n  const peekPath = process.env.STASH_MEDIA_PATH || '/app/media';\n\n  return stashPath.replace(internalPath, peekPath);\n}\n</code></pre></p>"},{"location":"development/contributing/#react-components","title":"React Components","text":"<ul> <li>Props interface first: Define prop types at top of file</li> <li>Use hooks: <code>useState</code>, <code>useEffect</code>, <code>useCallback</code>, <code>useMemo</code></li> <li>Destructure props: <code>const { scene, onPlay } = props</code></li> <li>Default exports: Export component as default</li> </ul> <p>Example: <pre><code>interface SceneCardProps {\n  scene: Scene;\n  onPlay: (sceneId: string) =&gt; void;\n  className?: string;\n}\n\nconst SceneCard: React.FC&lt;SceneCardProps&gt; = ({\n  scene,\n  onPlay,\n  className = ''\n}) =&gt; {\n  const handleClick = useCallback(() =&gt; {\n    onPlay(scene.id);\n  }, [scene.id, onPlay]);\n\n  return (\n    &lt;div className={`scene-card ${className}`} onClick={handleClick}&gt;\n      {/* Component content */}\n    &lt;/div&gt;\n  );\n};\n\nexport default SceneCard;\n</code></pre></p>"},{"location":"development/contributing/#csstailwind","title":"CSS/Tailwind","text":"<ul> <li>Use Tailwind utilities over custom CSS</li> <li>Semantic class names for custom components</li> <li>Responsive by default: Use responsive prefixes (<code>md:</code>, <code>lg:</code>)</li> <li>Theme variables: Use theme colors and spacing</li> </ul> <p>Example: <pre><code>&lt;button className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500\"&gt;\n  Click Me\n&lt;/button&gt;\n</code></pre></p>"},{"location":"development/contributing/#commit-messages","title":"Commit Messages","text":"<p>Follow conventional commit format:</p> <pre><code>&lt;type&gt;: &lt;subject&gt;\n\n&lt;body&gt;\n\n\ud83e\udd16 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude &lt;noreply@anthropic.com&gt;\n</code></pre> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation changes - <code>refactor</code>: Code refactoring - <code>perf</code>: Performance improvements - <code>test</code>: Adding or updating tests - <code>chore</code>: Build process or auxiliary tool changes</p> <p>Example: <pre><code>feat: Add quality selector to video player\n\nImplement quality selection UI allowing users to manually switch\nbetween 720p, 480p, and 360p transcoding qualities. Replaces\nautomatic quality switching with user control.\n\nChanges:\n- Add quality selector dropdown to player controls\n- Update VideoPlayer component to handle quality changes\n- Add quality state management to useVideoPlayer hook\n\n\ud83e\udd16 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude &lt;noreply@anthropic.com&gt;\n</code></pre></p>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":""},{"location":"development/contributing/#1-update-your-branch","title":"1. Update Your Branch","text":"<p>Before submitting, sync with upstream:</p> <pre><code>git fetch upstream\ngit rebase upstream/main\n</code></pre>"},{"location":"development/contributing/#2-push-to-your-fork","title":"2. Push to Your Fork","text":"<pre><code>git push origin feature/your-feature-name\n</code></pre>"},{"location":"development/contributing/#3-create-pull-request","title":"3. Create Pull Request","text":"<p>On GitHub:</p> <ol> <li>Click \"New Pull Request\"</li> <li>Select your fork and branch</li> <li>Fill out the PR template</li> <li>Link related issues</li> </ol>"},{"location":"development/contributing/#pr-requirements","title":"PR Requirements","text":"<ul> <li> All tests passing</li> <li> Linters passing</li> <li> Documentation updated (if needed)</li> <li> No merge conflicts</li> <li> Descriptive title and description</li> <li> Screenshots for UI changes</li> </ul>"},{"location":"development/contributing/#pr-template","title":"PR Template","text":"<pre><code>## Description\n\nBrief description of what this PR does and why.\n\n## Type of Change\n\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] Documentation update\n\n## Testing\n\nDescribe how you tested your changes:\n\n1. Step one\n2. Step two\n3. Expected result\n\n## Screenshots (if applicable)\n\nAdd screenshots or GIFs showing the changes.\n\n## Checklist\n\n- [ ] I have performed a self-review of my code\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] I have made corresponding changes to the documentation\n- [ ] My changes generate no new warnings\n- [ ] I have added tests that prove my fix is effective or that my feature works\n- [ ] New and existing unit tests pass locally with my changes\n</code></pre>"},{"location":"development/contributing/#code-review","title":"Code Review","text":"<ul> <li>Be responsive: Address feedback promptly</li> <li>Ask questions: If feedback is unclear, ask for clarification</li> <li>Keep it professional: Focus on the code, not the person</li> <li>Update as needed: Push changes to your branch as requested</li> </ul>"},{"location":"development/contributing/#after-approval","title":"After Approval","text":"<p>Once approved, your PR will be merged by a maintainer. You can delete your branch after merging.</p>"},{"location":"development/contributing/#bug-reports","title":"Bug Reports","text":""},{"location":"development/contributing/#before-reporting","title":"Before Reporting","text":"<ol> <li>Check existing issues: Search for similar issues</li> <li>Verify it's a bug: Test in dev environment</li> <li>Gather information: Logs, screenshots, steps to reproduce</li> </ol>"},{"location":"development/contributing/#bug-report-template","title":"Bug Report Template","text":"<pre><code>## Bug Description\n\nA clear and concise description of what the bug is.\n\n## Steps to Reproduce\n\n1. Go to '...'\n2. Click on '...'\n3. Scroll down to '...'\n4. See error\n\n## Expected Behavior\n\nWhat you expected to happen.\n\n## Actual Behavior\n\nWhat actually happened.\n\n## Environment\n\n- **Platform**: unRAID / Docker / Development\n- **Version**: v1.0.0\n- **Browser**: Chrome 120 / Firefox 121 / Safari 17\n- **Stash Version**: 0.25.0\n\n## Logs\n\n```bash\n# Backend logs\ndocker logs peek-stash-browser-backend\n\n# Browser console errors\n(paste console output)\n</code></pre>"},{"location":"development/contributing/#screenshots","title":"Screenshots","text":"<p>If applicable, add screenshots to help explain your problem.</p>"},{"location":"development/contributing/#additional-context","title":"Additional Context","text":"<p>Any other context about the problem. <pre><code>## Feature Requests\n\n### Feature Request Template\n\n```markdown\n## Feature Description\n\nA clear and concise description of the feature you'd like to see.\n\n## Use Case\n\nExplain the problem this feature would solve and who would benefit.\n\n## Proposed Solution\n\nDescribe how you envision this feature working.\n\n## Alternatives Considered\n\nDescribe alternative solutions or features you've considered.\n\n## Implementation Complexity\n\nYour assessment of how complex this feature might be to implement:\n\n- [ ] Simple (&lt; 1 day)\n- [ ] Medium (1-3 days)\n- [ ] Complex (&gt; 3 days)\n\n## Additional Context\n\nAny other context, mockups, or examples.\n</code></pre></p>"},{"location":"development/contributing/#documentation-contributions","title":"Documentation Contributions","text":"<p>Documentation is just as important as code! Areas to contribute:</p> <ul> <li>API documentation: Document new endpoints</li> <li>User guides: Improve setup and usage docs</li> <li>Code comments: Add JSDoc/TSDoc comments</li> <li>README improvements: Clarify installation or features</li> <li>Troubleshooting: Add common issues and solutions</li> </ul>"},{"location":"development/contributing/#documentation-style","title":"Documentation Style","text":"<ul> <li>Be concise: Get to the point quickly</li> <li>Use examples: Code examples are better than descriptions</li> <li>Stay current: Update docs when code changes</li> <li>Test instructions: Verify commands and steps work</li> </ul>"},{"location":"development/contributing/#community-guidelines","title":"Community Guidelines","text":""},{"location":"development/contributing/#be-respectful","title":"Be Respectful","text":"<ul> <li>Welcoming: Be kind to new contributors</li> <li>Constructive: Provide helpful, actionable feedback</li> <li>Patient: Remember everyone was a beginner once</li> <li>Professional: Keep discussions focused on the project</li> </ul>"},{"location":"development/contributing/#communication-channels","title":"Communication Channels","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: General questions and ideas</li> <li>Pull Requests: Code review and collaboration</li> <li>Stash Discord: #third-party-integrations channel for Stash-related questions</li> </ul>"},{"location":"development/contributing/#development-resources","title":"Development Resources","text":""},{"location":"development/contributing/#documentation","title":"Documentation","text":"<ul> <li>Development Setup - Local environment setup</li> <li>Architecture - System design</li> <li>API Reference - REST API documentation</li> <li>Testing Guide - Writing tests</li> </ul>"},{"location":"development/contributing/#external-resources","title":"External Resources","text":"<ul> <li>React Documentation</li> <li>TypeScript Handbook</li> <li>Vite Guide</li> <li>Prisma Docs</li> <li>Video.js Documentation</li> <li>Stash GraphQL API</li> </ul>"},{"location":"development/contributing/#questions","title":"Questions?","text":"<ul> <li>Issues: Open an issue for bugs or feature requests</li> <li>Discussions: Use GitHub Discussions for questions</li> <li>Discord: Join the Stash Discord #third-party-integrations channel</li> </ul> <p>Thank you for contributing to Peek Stash Browser!</p>"},{"location":"development/setup/","title":"Development Setup","text":"<p>This guide will help you set up a local development environment for Peek Stash Browser.</p>"},{"location":"development/setup/#prerequisites","title":"Prerequisites","text":""},{"location":"development/setup/#required-software","title":"Required Software","text":"<ul> <li>Node.js 18+ - JavaScript runtime</li> <li>Docker &amp; Docker Compose - Container platform</li> <li>Git - Version control</li> <li>Code Editor - VS Code recommended</li> </ul>"},{"location":"development/setup/#recommended-vs-code-extensions","title":"Recommended VS Code Extensions","text":"<ul> <li>ES7+ React/Redux/React-Native snippets</li> <li>Tailwind CSS IntelliSense</li> <li>Prisma</li> <li>Docker</li> <li>ESLint</li> </ul>"},{"location":"development/setup/#initial-setup","title":"Initial Setup","text":""},{"location":"development/setup/#1-clone-repository","title":"1. Clone Repository","text":"<pre><code>git clone https://github.com/carrotwaxr/peek-stash-browser.git\ncd peek-stash-browser\n</code></pre>"},{"location":"development/setup/#2-configure-environment","title":"2. Configure Environment","text":"<pre><code>cp .env.example .env\n</code></pre> <p>Edit <code>.env</code> with your Stash server settings:</p> <pre><code>STASH_URL=http://your-stash-server:9999/graphql\nSTASH_API_KEY=your_api_key\nDATABASE_URL=file:./data/peek-stash-browser.db\nTMP_DIR=/path/to/temp/directory\nNODE_ENV=development\nJWT_SECRET=dev-secret-change-in-production\n</code></pre>"},{"location":"development/setup/#3-start-development-environment","title":"3. Start Development Environment","text":"<pre><code># Starts both frontend and backend with hot reloading\ndocker-compose up -d\n</code></pre> <p>Hot Reloading Enabled</p> <p>Both frontend and backend have hot reloading - changes are reflected immediately!</p> <p>SQLite database is automatically initialized - no separate database container needed.</p>"},{"location":"development/setup/#4-access-development-environment","title":"4. Access Development Environment","text":"Service URL Credentials Frontend <code>http://localhost:6969</code> admin / admin Backend API <code>http://localhost:8000</code> - <p>Change Default Password</p> <p>Change the default admin password immediately after first login!</p>"},{"location":"development/setup/#making-changes","title":"Making Changes","text":""},{"location":"development/setup/#frontend-development","title":"Frontend Development","text":"<ul> <li>Location: <code>client/src/</code></li> <li>Effect: Browser refreshes automatically</li> <li>Technology: React 19 + Vite + Tailwind CSS</li> </ul> <pre><code># Run frontend tests\ncd client &amp;&amp; npm test\n\n# Run linter\ncd client &amp;&amp; npm run lint\n\n# Build for production\ncd client &amp;&amp; npm run build\n</code></pre>"},{"location":"development/setup/#backend-development","title":"Backend Development","text":"<ul> <li>Location: <code>server/</code></li> <li>Effect: Server restarts automatically (nodemon)</li> <li>Technology: Node.js + Express + TypeScript</li> </ul> <pre><code># Run backend tests\ncd server &amp;&amp; npm test\n\n# Run linter\ncd server &amp;&amp; npm run lint\n\n# Build for production\ncd server &amp;&amp; npm run build\n</code></pre>"},{"location":"development/setup/#database-changes","title":"Database Changes","text":"<ul> <li>Database: SQLite (embedded)</li> <li>ORM: Prisma</li> <li>Location: <code>server/prisma/schema.prisma</code></li> </ul> <pre><code># Generate Prisma client after schema changes\ncd server &amp;&amp; npx prisma generate\n\n# Create migration\ncd server &amp;&amp; npx prisma migrate dev --name your_migration_name\n\n# Apply migrations\ncd server &amp;&amp; npx prisma migrate deploy\n</code></pre>"},{"location":"development/setup/#development-workflow","title":"Development Workflow","text":""},{"location":"development/setup/#creating-a-feature","title":"Creating a Feature","text":"<pre><code># 1. Create feature branch\ngit checkout -b feature/your-feature-name\n\n# 2. Make changes (hot reload active)\n\n# 3. Run tests\ncd client &amp;&amp; npm test\ncd server &amp;&amp; npm test\n\n# 4. Run linters\ncd client &amp;&amp; npm run lint\ncd server &amp;&amp; npm run lint\n\n# 5. Commit changes\ngit add .\ngit commit -m \"feat: your feature description\"\n\n# 6. Push to GitHub\ngit push origin feature/your-feature-name\n</code></pre>"},{"location":"development/setup/#testing","title":"Testing","text":"<p>Peek uses Vitest for unit testing in both frontend and backend.</p> Frontend TestsBackend Tests <pre><code># Run in watch mode\ncd client &amp;&amp; npm test\n\n# Run with UI\ncd client &amp;&amp; npm run test:ui\n\n# Run once (CI mode)\ncd client &amp;&amp; npm run test:run\n\n# Example test files\n# client/src/components/video-player/videoPlayerUtils.test.js\n</code></pre> <pre><code># Run in watch mode\ncd server &amp;&amp; npm test\n\n# Run with UI\ncd server &amp;&amp; npm run test:ui\n\n# Run once (CI mode)\ncd server &amp;&amp; npm run test:run\n\n# Example test files\n# server/utils/pathMapping.test.ts\n</code></pre>"},{"location":"development/setup/#code-quality","title":"Code Quality","text":"<p>Peek uses ESLint 9 with flat config format for both frontend and backend.</p> <pre><code># Lint frontend (React/JSX)\ncd client &amp;&amp; npm run lint\n\n# Lint backend (TypeScript)\ncd server &amp;&amp; npm run lint\n</code></pre> <p>Configuration Files:</p> <ul> <li>Frontend: <code>client/eslint.config.js</code> (React hooks, React refresh)</li> <li>Backend: <code>server/eslint.config.js</code> (TypeScript strict mode)</li> </ul>"},{"location":"development/setup/#project-structure","title":"Project Structure","text":"<pre><code>peek-stash-browser/\n\u251c\u2500\u2500 client/                 # React frontend\n\u2502   \u251c\u2500\u2500 public/            # Static assets\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 components/    # React components\n\u2502   \u2502   \u251c\u2500\u2500 hooks/         # Custom React hooks\n\u2502   \u2502   \u251c\u2500\u2500 services/      # API services\n\u2502   \u2502   \u251c\u2500\u2500 utils/         # Utility functions\n\u2502   \u2502   \u251c\u2500\u2500 themes/        # Theme configuration\n\u2502   \u2502   \u2514\u2500\u2500 contexts/      # React contexts\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 vite.config.js\n\u251c\u2500\u2500 server/                # Node.js backend\n\u2502   \u251c\u2500\u2500 controllers/       # Route controllers\n\u2502   \u251c\u2500\u2500 middleware/        # Express middleware\n\u2502   \u251c\u2500\u2500 routes/            # API routes\n\u2502   \u251c\u2500\u2500 services/          # Business logic\n\u2502   \u251c\u2500\u2500 utils/             # Utility functions\n\u2502   \u251c\u2500\u2500 prisma/           # Database schema\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 docs/                  # Documentation\n\u251c\u2500\u2500 .github/workflows/     # CI/CD\n\u251c\u2500\u2500 docker-compose.yml     # Development\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"development/setup/#debugging","title":"Debugging","text":""},{"location":"development/setup/#vs-code-debug-configuration","title":"VS Code Debug Configuration","text":"<p>Create <code>.vscode/launch.json</code>:</p> <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Backend\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/server/src/index.ts\",\n      \"env\": {\n        \"NODE_ENV\": \"development\"\n      },\n      \"runtimeArgs\": [\"-r\", \"ts-node/register\"],\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}\n</code></pre>"},{"location":"development/setup/#viewing-logs","title":"Viewing Logs","text":"<pre><code># View all logs\ndocker-compose logs -f\n\n# View backend logs only\ndocker-compose logs -f backend\n\n# View frontend logs only\ndocker-compose logs -f frontend\n</code></pre>"},{"location":"development/setup/#common-issues","title":"Common Issues","text":"<p>Port already in use: <pre><code># Stop all containers\ndocker-compose down\n\n# Start again\ndocker-compose up -d\n</code></pre></p> <p>Database connection issues: <pre><code># Reset database\ndocker-compose down -v\ndocker-compose up -d\n</code></pre></p> <p>Hot reload not working: <pre><code># Restart containers\ndocker-compose restart\n</code></pre></p>"},{"location":"development/setup/#next-steps","title":"Next Steps","text":"<ul> <li>Architecture Overview</li> <li>API Reference</li> <li>Testing Guide</li> <li>Contributing Guidelines</li> </ul>"},{"location":"development/setup/#additional-resources","title":"Additional Resources","text":"<ul> <li>React Documentation</li> <li>Vite Documentation</li> <li>Prisma Documentation</li> <li>TypeScript Documentation</li> </ul>"},{"location":"development/testing/","title":"Testing Guide","text":"<p>This document covers testing strategies, tools, and best practices for Peek Stash Browser, including unit tests, integration tests, and end-to-end testing.</p>"},{"location":"development/testing/#testing-framework","title":"Testing Framework","text":"<p>Peek uses Vitest for both frontend and backend testing. Vitest is a modern, fast testing framework with native ES modules support and excellent TypeScript integration.</p>"},{"location":"development/testing/#why-vitest","title":"Why Vitest?","text":"<ul> <li>Fast: Runs tests in parallel with smart caching</li> <li>Modern: Native ESM and TypeScript support</li> <li>Compatible: Jest-compatible API (easy migration)</li> <li>Developer Experience: Watch mode, UI, and great error messages</li> <li>Unified: Same tool for frontend and backend</li> </ul>"},{"location":"development/testing/#frontend-testing","title":"Frontend Testing","text":""},{"location":"development/testing/#setup","title":"Setup","text":"<p>Tests are located in <code>client/src/</code> alongside the code they test.</p> <p>Test Files: - Unit tests: <code>*.test.js</code> or <code>*.test.jsx</code> - Component tests: <code>ComponentName.test.jsx</code></p> <p>Example Test File Location: <pre><code>client/src/components/video-player/\n\u251c\u2500\u2500 VideoPlayer.jsx\n\u251c\u2500\u2500 VideoPlayer.test.jsx\n\u251c\u2500\u2500 videoPlayerUtils.js\n\u2514\u2500\u2500 videoPlayerUtils.test.js\n</code></pre></p>"},{"location":"development/testing/#running-frontend-tests","title":"Running Frontend Tests","text":"<pre><code># Run tests in watch mode (development)\ncd client &amp;&amp; npm test\n\n# Run tests once (CI mode)\ncd client &amp;&amp; npm run test:run\n\n# Run tests with UI\ncd client &amp;&amp; npm run test:ui\n\n# Run tests with coverage\ncd client &amp;&amp; npm run test:coverage\n</code></pre>"},{"location":"development/testing/#writing-component-tests","title":"Writing Component Tests","text":"<p>Testing React Components with happy-dom:</p> <pre><code>// client/src/components/ui/Button.test.jsx\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { describe, it, expect, vi } from 'vitest';\nimport Button from './Button';\n\ndescribe('Button', () =&gt; {\n  it('renders button text', () =&gt; {\n    render(&lt;Button&gt;Click Me&lt;/Button&gt;);\n    expect(screen.getByText('Click Me')).toBeInTheDocument();\n  });\n\n  it('calls onClick when clicked', () =&gt; {\n    const handleClick = vi.fn();\n    render(&lt;Button onClick={handleClick}&gt;Click Me&lt;/Button&gt;);\n\n    fireEvent.click(screen.getByText('Click Me'));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  it('applies variant classes', () =&gt; {\n    render(&lt;Button variant=\"primary\"&gt;Primary&lt;/Button&gt;);\n    const button = screen.getByText('Primary');\n    expect(button.className).toContain('bg-blue-600');\n  });\n\n  it('is disabled when disabled prop is true', () =&gt; {\n    render(&lt;Button disabled&gt;Disabled&lt;/Button&gt;);\n    expect(screen.getByText('Disabled')).toBeDisabled();\n  });\n});\n</code></pre>"},{"location":"development/testing/#testing-custom-hooks","title":"Testing Custom Hooks","text":"<pre><code>// client/src/hooks/useApi.test.js\nimport { renderHook, waitFor } from '@testing-library/react';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { useApi } from './useApi';\n\n// Mock the API module\nvi.mock('../services/api', () =&gt; ({\n  default: {\n    get: vi.fn(),\n    post: vi.fn()\n  }\n}));\n\nimport api from '../services/api';\n\ndescribe('useApi', () =&gt; {\n  beforeEach(() =&gt; {\n    vi.clearAllMocks();\n  });\n\n  it('fetches data successfully', async () =&gt; {\n    const mockData = { id: 1, name: 'Test' };\n    api.get.mockResolvedValue({ data: mockData });\n\n    const { result } = renderHook(() =&gt; useApi('/test'));\n\n    expect(result.current.loading).toBe(true);\n\n    await waitFor(() =&gt; {\n      expect(result.current.loading).toBe(false);\n    });\n\n    expect(result.current.data).toEqual(mockData);\n    expect(result.current.error).toBe(null);\n  });\n\n  it('handles errors', async () =&gt; {\n    const mockError = new Error('API Error');\n    api.get.mockRejectedValue(mockError);\n\n    const { result } = renderHook(() =&gt; useApi('/test'));\n\n    await waitFor(() =&gt; {\n      expect(result.current.loading).toBe(false);\n    });\n\n    expect(result.current.error).toBe(mockError);\n    expect(result.current.data).toBe(null);\n  });\n});\n</code></pre>"},{"location":"development/testing/#testing-utility-functions","title":"Testing Utility Functions","text":"<pre><code>// client/src/utils/videoFormat.test.js\nimport { describe, it, expect } from 'vitest';\nimport { formatDuration, formatFileSize } from './videoFormat';\n\ndescribe('formatDuration', () =&gt; {\n  it('formats seconds correctly', () =&gt; {\n    expect(formatDuration(0)).toBe('0:00');\n    expect(formatDuration(59)).toBe('0:59');\n    expect(formatDuration(60)).toBe('1:00');\n    expect(formatDuration(3661)).toBe('1:01:01');\n  });\n\n  it('pads minutes and seconds', () =&gt; {\n    expect(formatDuration(125)).toBe('2:05');\n    expect(formatDuration(3605)).toBe('1:00:05');\n  });\n});\n\ndescribe('formatFileSize', () =&gt; {\n  it('formats bytes to human readable', () =&gt; {\n    expect(formatFileSize(0)).toBe('0 B');\n    expect(formatFileSize(1024)).toBe('1.0 KB');\n    expect(formatFileSize(1048576)).toBe('1.0 MB');\n    expect(formatFileSize(1073741824)).toBe('1.0 GB');\n  });\n\n  it('rounds to one decimal place', () =&gt; {\n    expect(formatFileSize(1536)).toBe('1.5 KB');\n    expect(formatFileSize(2621440)).toBe('2.5 MB');\n  });\n});\n</code></pre>"},{"location":"development/testing/#backend-testing","title":"Backend Testing","text":""},{"location":"development/testing/#setup_1","title":"Setup","text":"<p>Tests are located in <code>server/</code> alongside the code they test or in dedicated <code>__tests__</code> directories.</p> <p>Test Files: - Unit tests: <code>*.test.ts</code> - Integration tests: <code>*.integration.test.ts</code></p>"},{"location":"development/testing/#running-backend-tests","title":"Running Backend Tests","text":"<pre><code># Run tests in watch mode (development)\ncd server &amp;&amp; npm test\n\n# Run tests once (CI mode)\ncd server &amp;&amp; npm run test:run\n\n# Run tests with UI\ncd server &amp;&amp; npm run test:ui\n\n# Run tests with coverage\ncd server &amp;&amp; npm run test:coverage\n</code></pre>"},{"location":"development/testing/#testing-utility-functions_1","title":"Testing Utility Functions","text":"<pre><code>// server/utils/pathMapping.test.ts\nimport { describe, it, expect } from 'vitest';\nimport { translateStashPath } from './pathMapping';\n\ndescribe('translateStashPath', () =&gt; {\n  it('translates Stash internal path to Peek path', () =&gt; {\n    process.env.STASH_INTERNAL_PATH = '/data';\n    process.env.STASH_MEDIA_PATH = '/app/media';\n\n    const stashPath = '/data/scenes/video.mp4';\n    const expected = '/app/media/scenes/video.mp4';\n\n    expect(translateStashPath(stashPath)).toBe(expected);\n  });\n\n  it('handles paths without internal prefix', () =&gt; {\n    process.env.STASH_INTERNAL_PATH = '/data';\n    process.env.STASH_MEDIA_PATH = '/app/media';\n\n    const stashPath = '/other/path/video.mp4';\n\n    expect(translateStashPath(stashPath)).toBe(stashPath);\n  });\n\n  it('handles trailing slashes correctly', () =&gt; {\n    process.env.STASH_INTERNAL_PATH = '/data/';\n    process.env.STASH_MEDIA_PATH = '/app/media/';\n\n    const stashPath = '/data/scenes/video.mp4';\n    const expected = '/app/media/scenes/video.mp4';\n\n    expect(translateStashPath(stashPath)).toBe(expected);\n  });\n});\n</code></pre>"},{"location":"development/testing/#testing-api-endpoints","title":"Testing API Endpoints","text":"<pre><code>// server/controllers/__tests__/auth.test.ts\nimport { describe, it, expect, beforeAll, afterAll, beforeEach } from 'vitest';\nimport request from 'supertest';\nimport { app } from '../../api';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\ndescribe('Authentication Endpoints', () =&gt; {\n  beforeAll(async () =&gt; {\n    await prisma.$connect();\n  });\n\n  afterAll(async () =&gt; {\n    await prisma.$disconnect();\n  });\n\n  beforeEach(async () =&gt; {\n    // Clean up test users before each test\n    await prisma.user.deleteMany({\n      where: { email: 'test@example.com' }\n    });\n  });\n\n  describe('POST /api/auth/login', () =&gt; {\n    it('authenticates valid user', async () =&gt; {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'admin@example.com',\n          password: 'admin'\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('token');\n      expect(response.body.user.email).toBe('admin@example.com');\n    });\n\n    it('rejects invalid credentials', async () =&gt; {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'admin@example.com',\n          password: 'wrongpassword'\n        });\n\n      expect(response.status).toBe(401);\n      expect(response.body).toHaveProperty('error');\n    });\n\n    it('validates required fields', async () =&gt; {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({ email: 'admin@example.com' });\n\n      expect(response.status).toBe(400);\n    });\n  });\n\n  describe('POST /api/auth/register', () =&gt; {\n    it('creates new user (admin only)', async () =&gt; {\n      // First login as admin to get token\n      const loginRes = await request(app)\n        .post('/api/auth/login')\n        .send({ email: 'admin@example.com', password: 'admin' });\n\n      const token = loginRes.body.token;\n\n      // Create new user\n      const response = await request(app)\n        .post('/api/auth/register')\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          email: 'test@example.com',\n          password: 'testpassword',\n          role: 'USER'\n        });\n\n      expect(response.status).toBe(201);\n      expect(response.body.user.email).toBe('test@example.com');\n    });\n\n    it('rejects duplicate email', async () =&gt; {\n      const loginRes = await request(app)\n        .post('/api/auth/login')\n        .send({ email: 'admin@example.com', password: 'admin' });\n\n      const token = loginRes.body.token;\n\n      // Try to create duplicate user\n      const response = await request(app)\n        .post('/api/auth/register')\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          email: 'admin@example.com',  // Already exists\n          password: 'password',\n          role: 'USER'\n        });\n\n      expect(response.status).toBe(400);\n    });\n\n    it('requires admin role', async () =&gt; {\n      // Create regular user and get their token\n      // ... (implementation depends on test setup)\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .set('Authorization', `Bearer ${userToken}`)\n        .send({\n          email: 'test@example.com',\n          password: 'password',\n          role: 'USER'\n        });\n\n      expect(response.status).toBe(403);\n    });\n  });\n});\n</code></pre>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":""},{"location":"development/testing/#viewing-coverage-reports","title":"Viewing Coverage Reports","text":"<pre><code># Generate coverage for frontend\ncd client &amp;&amp; npm run test:coverage\n\n# Generate coverage for backend\ncd server &amp;&amp; npm run test:coverage\n\n# Open HTML report\nopen coverage/index.html\n</code></pre>"},{"location":"development/testing/#coverage-goals","title":"Coverage Goals","text":"Component Target Coverage Utilities 90%+ Services 80%+ Controllers 70%+ Components 60%+ <p>Focus on Critical Paths</p> <p>Prioritize testing critical business logic (transcoding, authentication, path translation) over UI components.</p>"},{"location":"development/testing/#integration-testing","title":"Integration Testing","text":""},{"location":"development/testing/#testing-video-transcoding","title":"Testing Video Transcoding","text":"<pre><code>// server/services/__tests__/TranscodingManager.integration.test.ts\nimport { describe, it, expect, beforeAll, afterAll } from 'vitest';\nimport { TranscodingManager } from '../TranscodingManager';\nimport fs from 'fs';\nimport path from 'path';\n\ndescribe('TranscodingManager Integration', () =&gt; {\n  let manager: TranscodingManager;\n  const testVideoPath = path.join(__dirname, 'fixtures', 'test-video.mp4');\n  const outputDir = path.join(__dirname, 'output');\n\n  beforeAll(() =&gt; {\n    manager = new TranscodingManager();\n\n    // Ensure output directory exists\n    if (!fs.existsSync(outputDir)) {\n      fs.mkdirSync(outputDir, { recursive: true });\n    }\n  });\n\n  afterAll(() =&gt; {\n    // Cleanup\n    if (fs.existsSync(outputDir)) {\n      fs.rmSync(outputDir, { recursive: true });\n    }\n  });\n\n  it('creates transcoding session', async () =&gt; {\n    const session = await manager.createSession({\n      sceneId: 'test-scene',\n      userId: 'test-user',\n      startTime: 0,\n      qualities: ['720p', '480p', '360p'],\n      inputPath: testVideoPath,\n      outputDir\n    });\n\n    expect(session.sessionId).toBeDefined();\n    expect(session.qualities).toEqual(['720p', '480p', '360p']);\n    expect(session.status).toBe('starting');\n  }, 10000);  // 10 second timeout for FFmpeg startup\n\n  it('generates HLS playlists', async () =&gt; {\n    const session = await manager.createSession({\n      sceneId: 'test-scene',\n      userId: 'test-user',\n      startTime: 0,\n      qualities: ['360p'],  // Test with single quality\n      inputPath: testVideoPath,\n      outputDir\n    });\n\n    // Wait for master playlist to be generated\n    await new Promise(resolve =&gt; setTimeout(resolve, 5000));\n\n    const masterPlaylistPath = path.join(outputDir, session.sessionId, 'master.m3u8');\n    expect(fs.existsSync(masterPlaylistPath)).toBe(true);\n\n    const qualityPlaylistPath = path.join(outputDir, session.sessionId, '360p', 'playlist.m3u8');\n    expect(fs.existsSync(qualityPlaylistPath)).toBe(true);\n  }, 15000);\n\n  it('cleans up session', async () =&gt; {\n    const session = await manager.createSession({\n      sceneId: 'test-scene',\n      userId: 'test-user',\n      startTime: 0,\n      qualities: ['360p'],\n      inputPath: testVideoPath,\n      outputDir\n    });\n\n    await manager.terminateSession(session.sessionId);\n\n    const sessionDir = path.join(outputDir, session.sessionId);\n    expect(fs.existsSync(sessionDir)).toBe(false);\n  });\n});\n</code></pre>"},{"location":"development/testing/#mocking-and-fixtures","title":"Mocking and Fixtures","text":""},{"location":"development/testing/#mocking-external-services","title":"Mocking External Services","text":"<pre><code>// server/__tests__/mocks/stash.ts\nimport { vi } from 'vitest';\n\nexport const mockStashApi = {\n  findScenes: vi.fn().mockResolvedValue({\n    count: 10,\n    scenes: [\n      {\n        id: '1',\n        title: 'Test Scene',\n        date: '2025-01-15',\n        rating100: 85,\n        duration: 1800\n      }\n    ]\n  }),\n\n  findPerformers: vi.fn().mockResolvedValue({\n    count: 5,\n    performers: [\n      {\n        id: '1',\n        name: 'Test Performer',\n        favorite: true\n      }\n    ]\n  })\n};\n</code></pre>"},{"location":"development/testing/#test-fixtures","title":"Test Fixtures","text":"<pre><code>// server/__tests__/fixtures/scenes.ts\nexport const mockScene = {\n  id: '12345',\n  title: 'Test Scene',\n  date: '2025-01-15',\n  rating100: 85,\n  duration: 1800,\n  files: [\n    {\n      path: '/data/videos/test.mp4',\n      size: '1234567890',\n      duration: 1800,\n      video_codec: 'h264',\n      audio_codec: 'aac'\n    }\n  ],\n  performers: [\n    {\n      id: '67890',\n      name: 'Test Performer',\n      favorite: true\n    }\n  ]\n};\n</code></pre>"},{"location":"development/testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"development/testing/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/test.yml\nname: Run Tests\n\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\n\njobs:\n  test-frontend:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n\n      - name: Install dependencies\n        run: cd client &amp;&amp; npm ci\n\n      - name: Run linter\n        run: cd client &amp;&amp; npm run lint\n\n      - name: Run tests\n        run: cd client &amp;&amp; npm run test:run\n\n      - name: Generate coverage\n        run: cd client &amp;&amp; npm run test:coverage\n\n      - name: Upload coverage\n        uses: codecov/codecov-action@v3\n        with:\n          files: ./client/coverage/coverage-final.json\n\n  test-backend:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n\n      - name: Install dependencies\n        run: cd server &amp;&amp; npm ci\n\n      - name: Run linter\n        run: cd server &amp;&amp; npm run lint\n\n      - name: Run tests\n        run: cd server &amp;&amp; npm run test:run\n\n      - name: Generate coverage\n        run: cd server &amp;&amp; npm run test:coverage\n\n      - name: Upload coverage\n        uses: codecov/codecov-action@v3\n        with:\n          files: ./server/coverage/coverage-final.json\n</code></pre>"},{"location":"development/testing/#best-practices","title":"Best Practices","text":""},{"location":"development/testing/#test-organization","title":"Test Organization","text":"<ol> <li>Co-locate tests: Keep tests next to the code they test</li> <li>Descriptive names: Use clear <code>describe</code> and <code>it</code> blocks</li> <li>One assertion per test: Focus each test on a single behavior</li> <li>Arrange-Act-Assert: Structure tests clearly</li> </ol> <p>Example: <pre><code>describe('formatDuration', () =&gt; {\n  it('formats 90 seconds as 1:30', () =&gt; {\n    // Arrange\n    const seconds = 90;\n\n    // Act\n    const result = formatDuration(seconds);\n\n    // Assert\n    expect(result).toBe('1:30');\n  });\n});\n</code></pre></p>"},{"location":"development/testing/#avoid-common-pitfalls","title":"Avoid Common Pitfalls","text":"<ul> <li>Don't test implementation details: Test behavior, not internals</li> <li>Don't rely on test order: Each test should be independent</li> <li>Don't skip cleanup: Always clean up after tests (database, files)</li> <li>Don't hardcode dates: Use relative dates or mocks for time-dependent tests</li> </ul>"},{"location":"development/testing/#testing-videojs","title":"Testing Video.js","text":"<p>For Video.js components, test the integration points, not Video.js internals:</p> <pre><code>// Test what we control, not Video.js behavior\nit('initializes player with correct options', () =&gt; {\n  const { result } = renderHook(() =&gt; useVideoPlayer());\n\n  expect(result.current.playerOptions).toMatchObject({\n    autoplay: true,\n    controls: true,\n    responsive: true\n  });\n});\n\nit('calls onReady when player is ready', () =&gt; {\n  const onReady = vi.fn();\n  render(&lt;VideoPlayer onReady={onReady} /&gt;);\n\n  // Trigger Video.js ready event (mocked)\n  // ...\n\n  expect(onReady).toHaveBeenCalled();\n});\n</code></pre>"},{"location":"development/testing/#debugging-tests","title":"Debugging Tests","text":""},{"location":"development/testing/#running-single-test-file","title":"Running Single Test File","text":"<pre><code># Frontend\ncd client &amp;&amp; npm test -- path/to/test.test.js\n\n# Backend\ncd server &amp;&amp; npm test -- path/to/test.test.ts\n</code></pre>"},{"location":"development/testing/#running-specific-test","title":"Running Specific Test","text":"<pre><code># Use .only() to run a single test\nit.only('should do something', () =&gt; {\n  // This test runs alone\n});\n</code></pre>"},{"location":"development/testing/#debugging-in-vs-code","title":"Debugging in VS Code","text":"<p>Add to <code>.vscode/launch.json</code>:</p> <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Vitest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeExecutable\": \"npm\",\n      \"runtimeArgs\": [\"test\", \"--\", \"--run\"],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n</code></pre>"},{"location":"development/testing/#next-steps","title":"Next Steps","text":"<ul> <li>Contributing Guide - How to contribute code</li> <li>API Reference - Testing API endpoints</li> <li>Architecture - System overview</li> </ul>"},{"location":"development/video-system/","title":"Video System Architecture","text":"<p>This document provides comprehensive details about Peek's video transcoding and streaming system, including FFmpeg integration, HLS streaming, and Video.js configuration.</p>"},{"location":"development/video-system/#overview","title":"Overview","text":"<p>Peek uses a session-based transcoding system powered by FFmpeg to deliver adaptive HLS (HTTP Live Streaming) video with multiple quality levels. Videos are transcoded on-demand when users play them, with intelligent session management for seeking and quality switching.</p>"},{"location":"development/video-system/#transcoding-manager","title":"Transcoding Manager","text":"<p>The <code>TranscodingManager</code> service (<code>server/src/services/TranscodingManager.ts</code>) is the core of the video system, managing FFmpeg processes and HLS session lifecycle.</p>"},{"location":"development/video-system/#session-architecture","title":"Session Architecture","text":"<p>Each video playback session is represented by a unique session object:</p> <pre><code>interface TranscodingSession {\n  sessionId: string;        // Unique identifier (UUID)\n  sceneId: string;          // Source video ID from Stash\n  startTime: number;        // Seek position in seconds\n  userId: string;           // User who initiated session\n  status: SessionStatus;    // Current session status\n  qualities: string[];      // Available quality levels ['720p', '480p', '360p']\n  processes: Map&lt;string, ChildProcess&gt;;  // FFmpeg processes per quality\n  lastAccess: Date;         // For cleanup tracking\n  outputDir: string;        // Temporary file directory\n  scene?: Scene;            // Cached scene metadata from Stash\n}\n\ntype SessionStatus = 'starting' | 'active' | 'completed' | 'error';\n</code></pre>"},{"location":"development/video-system/#quality-presets","title":"Quality Presets","text":"<p>Peek offers three quality levels with optimized encoding parameters:</p> <pre><code>const QUALITY_PRESETS = {\n  '720p': {\n    video: {\n      resolution: '1280:720',\n      bitrate: '2500k',\n      maxrate: '2800k',\n      bufsize: '5000k'\n    },\n    audio: {\n      bitrate: '128k',\n      sampleRate: '48000'\n    }\n  },\n  '480p': {\n    video: {\n      resolution: '854:480',\n      bitrate: '1000k',\n      maxrate: '1200k',\n      bufsize: '2000k'\n    },\n    audio: {\n      bitrate: '96k',\n      sampleRate: '44100'\n    }\n  },\n  '360p': {\n    video: {\n      resolution: '640:360',\n      bitrate: '500k',\n      maxrate: '600k',\n      bufsize: '1000k'\n    },\n    audio: {\n      bitrate: '64k',\n      sampleRate: '44100'\n    }\n  }\n};\n</code></pre>"},{"location":"development/video-system/#ffmpeg-integration","title":"FFmpeg Integration","text":""},{"location":"development/video-system/#hls-generation-command","title":"HLS Generation Command","text":"<p>Peek uses FFmpeg to generate HLS playlists and segments with adaptive quality:</p> <pre><code>ffmpeg -ss ${startTime} -i \"${inputFile}\" \\\n  -c:v libx264 -preset fast -crf 23 \\\n  -c:a aac -strict experimental \\\n  -f hls \\\n  -hls_time 4 \\\n  -hls_list_size 0 \\\n  -hls_segment_type mpegts \\\n  -master_pl_name master.m3u8 \\\n  -var_stream_map \"v:0,a:0 v:1,a:1 v:2,a:2\" \\\n  -hls_segment_filename \"${outputDir}/stream_%v/segment_%03d.ts\" \\\n  \"${outputDir}/stream_%v/playlist.m3u8\"\n</code></pre> <p>Key FFmpeg Options:</p> Option Purpose <code>-ss ${startTime}</code> Seek to start position (before input for efficiency) <code>-i \"${inputFile}\"</code> Input video file <code>-c:v libx264</code> H.264 video codec <code>-preset fast</code> Encoding speed/quality tradeoff <code>-crf 23</code> Constant Rate Factor (quality level, lower = better) <code>-c:a aac</code> AAC audio codec <code>-f hls</code> HLS output format <code>-hls_time 4</code> 4-second segment duration <code>-hls_list_size 0</code> Keep all segments in playlist (VOD mode) <code>-master_pl_name</code> Master playlist filename <code>-var_stream_map</code> Map video/audio streams to quality variants <code>-hls_segment_filename</code> Template for segment files"},{"location":"development/video-system/#encoding-parameters","title":"Encoding Parameters","text":"<p>Video Encoding: - Codec: H.264 (libx264) for broad compatibility - Preset: <code>fast</code> balances encoding speed and quality - CRF: 23 (good quality, reasonable file size) - Keyframe interval: Every 2 seconds for seekability</p> <p>Audio Encoding: - Codec: AAC for compatibility - Bitrate: 128k (720p), 96k (480p), 64k (360p) - Sample rate: 48kHz (720p), 44.1kHz (480p/360p)</p> <p>HLS Settings: - Segment duration: 4 seconds (balance between latency and efficiency) - Playlist type: VOD (complete playlist with all segments) - Segment format: MPEG-TS for compatibility</p>"},{"location":"development/video-system/#session-lifecycle","title":"Session Lifecycle","text":""},{"location":"development/video-system/#1-session-creation","title":"1. Session Creation","text":"<p>When a user requests video playback:</p> <pre><code>const session = await transcodingManager.createSession({\n  sceneId: '12345',\n  userId: 'user-uuid',\n  startTime: 120,  // Start at 2 minutes\n  qualities: ['720p', '480p', '360p']\n});\n\n// Returns:\n{\n  sessionId: 'session-uuid',\n  masterPlaylistUrl: '/api/video/session/session-uuid/master.m3u8'\n}\n</code></pre>"},{"location":"development/video-system/#2-ffmpeg-process-startup","title":"2. FFmpeg Process Startup","text":"<p>For each quality level, Peek spawns an FFmpeg process:</p> <pre><code>const ffmpegProcess = spawn('ffmpeg', [\n  '-ss', startTime.toString(),\n  '-i', videoPath,\n  // ... encoding parameters\n  '-hls_segment_filename', `${outputDir}/${quality}/segment_%03d.ts`,\n  `${outputDir}/${quality}/playlist.m3u8`\n]);\n\n// Monitor process output\nffmpegProcess.stderr.on('data', (data) =&gt; {\n  logger.debug('FFmpeg output', { sessionId, quality, data: data.toString() });\n});\n\nffmpegProcess.on('exit', (code) =&gt; {\n  if (code === 0) {\n    session.status = 'completed';\n  } else {\n    session.status = 'error';\n    logger.error('FFmpeg process failed', { sessionId, quality, exitCode: code });\n  }\n});\n</code></pre>"},{"location":"development/video-system/#3-hls-playlist-serving","title":"3. HLS Playlist Serving","text":"<p>Master Playlist (<code>/api/video/session/:sessionId/master.m3u8</code>):</p> <pre><code>#EXTM3U\n#EXT-X-VERSION:6\n#EXT-X-STREAM-INF:BANDWIDTH=2500000,RESOLUTION=1280x720\nstream_0/playlist.m3u8\n#EXT-X-STREAM-INF:BANDWIDTH=1000000,RESOLUTION=854x480\nstream_1/playlist.m3u8\n#EXT-X-STREAM-INF:BANDWIDTH=500000,RESOLUTION=640x360\nstream_2/playlist.m3u8\n</code></pre> <p>Quality Playlist (<code>/api/video/session/:sessionId/720p/playlist.m3u8</code>):</p> <pre><code>#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-TARGETDURATION:4\n#EXT-X-MEDIA-SEQUENCE:0\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXTINF:4.000000,\nsegment_000.ts\n#EXTINF:4.000000,\nsegment_001.ts\n#EXTINF:4.000000,\nsegment_002.ts\n# ... continues for all segments\n#EXT-X-ENDLIST\n</code></pre>"},{"location":"development/video-system/#4-segment-delivery","title":"4. Segment Delivery","text":"<p>Video segments are served as they're generated by FFmpeg:</p> <pre><code>app.get('/api/video/session/:sessionId/:quality/segment_:num.ts', (req, res) =&gt; {\n  const { sessionId, quality, num } = req.params;\n  const session = transcodingManager.getSession(sessionId);\n\n  if (!session) {\n    return res.status(404).send('Session not found');\n  }\n\n  const segmentPath = path.join(\n    session.outputDir,\n    quality,\n    `segment_${num.padStart(3, '0')}.ts`\n  );\n\n  // Wait for segment to be generated if not ready\n  await waitForSegment(segmentPath);\n\n  res.sendFile(segmentPath);\n});\n</code></pre>"},{"location":"development/video-system/#5-session-cleanup","title":"5. Session Cleanup","text":"<p>Sessions are automatically cleaned up after inactivity:</p> <pre><code>const CLEANUP_INTERVAL = 30 * 60 * 1000;  // 30 minutes\n\nsetInterval(() =&gt; {\n  const now = Date.now();\n\n  for (const [sessionId, session] of sessions.entries()) {\n    const inactiveTime = now - session.lastAccess.getTime();\n\n    if (inactiveTime &gt; CLEANUP_INTERVAL) {\n      // Kill FFmpeg processes\n      for (const process of session.processes.values()) {\n        process.kill('SIGTERM');\n      }\n\n      // Delete temporary files\n      fs.rmSync(session.outputDir, { recursive: true, force: true });\n\n      // Remove session\n      sessions.delete(sessionId);\n\n      logger.info('Session cleaned up', { sessionId, inactiveTime });\n    }\n  }\n}, 5 * 60 * 1000);  // Check every 5 minutes\n</code></pre>"},{"location":"development/video-system/#seeking-and-session-reuse","title":"Seeking and Session Reuse","text":""},{"location":"development/video-system/#smart-seeking-strategy","title":"Smart Seeking Strategy","text":"<p>When a user seeks within a video, Peek decides whether to: 1. Reuse existing session (if seeking nearby) 2. Restart FFmpeg (if seeking far away)</p> <pre><code>const SEEK_THRESHOLD = 30;  // seconds\n\nasync function handleSeek(sessionId: string, newTime: number) {\n  const session = getSession(sessionId);\n  const timeDiff = Math.abs(newTime - session.startTime);\n\n  if (timeDiff &lt; SEEK_THRESHOLD) {\n    // Seeking nearby - keep existing session\n    // Video.js will navigate to correct segment\n    return { sessionId, reused: true };\n  } else {\n    // Seeking far - create new session from new position\n    return await createSession({\n      sceneId: session.sceneId,\n      userId: session.userId,\n      startTime: newTime,\n      qualities: session.qualities\n    });\n  }\n}\n</code></pre>"},{"location":"development/video-system/#segment-preservation","title":"Segment Preservation","text":"<p>When restarting a session from a new position, already-transcoded segments are preserved:</p> <pre><code>async function restartSession(session: TranscodingSession, newStartTime: number) {\n  // Kill existing FFmpeg processes\n  for (const process of session.processes.values()) {\n    process.kill('SIGTERM');\n  }\n\n  // Keep existing output directory with transcoded segments\n  const preservedDir = session.outputDir;\n\n  // Start new FFmpeg from new position\n  // Segments will be created with new numbering\n  // Old segments remain available for seeking back\n\n  session.startTime = newStartTime;\n  session.status = 'starting';\n\n  await startFFmpegProcesses(session);\n}\n</code></pre>"},{"location":"development/video-system/#videojs-configuration","title":"Video.js Configuration","text":""},{"location":"development/video-system/#player-setup","title":"Player Setup","text":"<p>Peek uses Video.js 8 with custom configuration for optimal HLS playback:</p> <pre><code>import videojs from 'video.js';\nimport 'video.js/dist/video-js.css';\n\nconst videoJsOptions = {\n  autoplay: true,\n  controls: true,\n  responsive: true,\n  fluid: true,\n  playbackRates: [0.5, 1, 1.25, 1.5, 2],\n\n  html5: {\n    vhs: {\n      // Force VHS for all browsers except Safari\n      overrideNative: !videojs.browser.IS_SAFARI,\n\n      // VOD-specific settings\n      enableLowInitialPlaylist: false,  // Don't treat as live\n      smoothQualityChange: true,        // Smooth quality switching\n      useBandwidthFromLocalStorage: true,\n      limitRenditionByPlayerDimensions: true,\n      allowSeeksWithinUnsafeLiveWindow: true,\n      handlePartialData: true,\n\n      // Bandwidth estimation\n      bandwidth: 4194304,  // 4 Mbps initial estimate\n      enableLowInitialPlaylist: false\n    },\n\n    // Disable native tracks for consistent behavior\n    nativeAudioTracks: false,\n    nativeVideoTracks: false\n  },\n\n  plugins: {\n    qualityLevels: {}  // Enable quality level selection\n  }\n};\n\nconst player = videojs('video-player', videoJsOptions);\n</code></pre>"},{"location":"development/video-system/#loading-hls-source","title":"Loading HLS Source","text":"<pre><code>player.src({\n  src: `/api/video/session/${sessionId}/master.m3u8`,\n  type: 'application/x-mpegURL'\n});\n\n// Wait for source to load\nplayer.ready(() =&gt; {\n  player.play();\n});\n</code></pre>"},{"location":"development/video-system/#quality-selector","title":"Quality Selector","text":"<p>Custom quality selector UI for user-controlled quality switching:</p> <pre><code>const qualityLevels = player.qualityLevels();\n\nqualityLevels.on('addqualitylevel', (event) =&gt; {\n  const quality = event.qualityLevel;\n\n  // Add quality option to UI\n  addQualityOption({\n    height: quality.height,\n    bitrate: quality.bitrate,\n    enabled: quality.enabled\n  });\n});\n\nfunction setQuality(height) {\n  for (let i = 0; i &lt; qualityLevels.length; i++) {\n    const level = qualityLevels[i];\n\n    if (height === 'auto') {\n      level.enabled = true;  // Enable all for auto\n    } else {\n      level.enabled = (level.height === height);\n    }\n  }\n}\n</code></pre>"},{"location":"development/video-system/#event-handling","title":"Event Handling","text":"<pre><code>// Track playback progress\nplayer.on('timeupdate', () =&gt; {\n  const currentTime = player.currentTime();\n  updateProgressBar(currentTime);\n});\n\n// Handle seeking\nplayer.on('seeking', () =&gt; {\n  const seekTime = player.currentTime();\n  logger.debug('User seeking', { seekTime });\n});\n\n// Handle quality changes\nqualityLevels.on('change', () =&gt; {\n  const currentQuality = qualityLevels[qualityLevels.selectedIndex];\n  logger.info('Quality changed', {\n    height: currentQuality.height,\n    bitrate: currentQuality.bitrate\n  });\n});\n\n// Handle errors\nplayer.on('error', (error) =&gt; {\n  logger.error('Video playback error', {\n    code: error.code,\n    message: error.message\n  });\n\n  showErrorMessage('Video playback failed. Please try again.');\n});\n</code></pre>"},{"location":"development/video-system/#path-translation","title":"Path Translation","text":"<p>Peek translates paths between Stash's internal Docker paths and Peek's mount points:</p> <pre><code>import { translateStashPath } from './utils/pathMapping';\n\n// Stash reports: /data/scenes/video.mp4\n// Peek mounts media at: /app/media\n\nconst stashPath = scene.files[0].path;  // \"/data/scenes/video.mp4\"\nconst peekPath = translateStashPath(stashPath);  // \"/app/media/scenes/video.mp4\"\n\n// Start transcoding with translated path\nawait transcodingManager.createSession({\n  inputPath: peekPath,\n  // ... other options\n});\n</code></pre> <p>Configuration: - <code>STASH_INTERNAL_PATH</code>: Path prefix Stash uses internally (default: <code>/data</code>) - <code>STASH_MEDIA_PATH</code>: Where Peek accesses Stash's media (default: <code>/app/media</code>)</p>"},{"location":"development/video-system/#performance-optimization","title":"Performance Optimization","text":""},{"location":"development/video-system/#encoding-performance","title":"Encoding Performance","text":"<p>Fast Preset: Balances speed and quality - Suitable for real-time transcoding - 0.8x - 2.0x encoding speed on typical hardware</p> <p>Seeking Optimization: <code>-ss</code> before <code>-i</code> for fast seeking - FFmpeg seeks in input file before decoding - Much faster than decoding then seeking</p> <p>Segment Duration: 4 seconds - Good balance between latency and efficiency - Smaller segments = more overhead, lower latency - Larger segments = less overhead, higher latency</p>"},{"location":"development/video-system/#network-performance","title":"Network Performance","text":"<p>Adaptive Bitrate: Video.js automatically selects quality based on bandwidth</p> <p>Quality Presets: - 720p @ 2.5 Mbps: Good for local networks, wired connections - 480p @ 1.0 Mbps: Good for WiFi, moderate bandwidth - 360p @ 500 Kbps: Good for mobile, low bandwidth</p> <p>Segment Buffering: Video.js buffers 2-3 segments ahead</p>"},{"location":"development/video-system/#storage-considerations","title":"Storage Considerations","text":"<p>Temporary Storage: - Each session creates temporary files in <code>CONFIG_DIR/hls-cache</code> - Storage usage: ~50-100 MB per quality per minute of video - Automatic cleanup after 30 minutes of inactivity</p> <p>Recommendations: - Use SSD for temporary storage (faster I/O) - Allocate 5-10 GB for <code>CONFIG_DIR</code> on busy servers - Monitor disk usage with cleanup scripts</p>"},{"location":"development/video-system/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/video-system/#common-issues","title":"Common Issues","text":"<p>Video Won't Play: 1. Check FFmpeg is installed: <code>ffmpeg -version</code> 2. Verify path mapping is correct (check logs for translated paths) 3. Check file permissions on media directory 4. Review FFmpeg errors in backend logs</p> <p>Slow Transcoding: 1. Check CPU usage (FFmpeg is CPU-intensive) 2. Verify media is on local storage (not network share) 3. Consider reducing quality presets 4. Check I/O performance with <code>dd if=/app/media/file.mp4 of=/dev/null</code></p> <p>Seeking Issues: 1. Check segment generation (are segments being created?) 2. Verify playlist is updated (check playlist.m3u8 content) 3. Review Video.js console logs for seeking errors 4. Check session is still active (not cleaned up)</p> <p>Quality Switching Issues: 1. Verify all quality playlists are being generated 2. Check Video.js quality levels are being detected 3. Review network bandwidth estimation 4. Test with <code>setQuality()</code> function manually</p>"},{"location":"development/video-system/#debug-logging","title":"Debug Logging","text":"<p>Enable detailed logging for video system debugging:</p> <pre><code>// Backend (server/utils/logger.ts)\nlogger.level = 'debug';\n\n// Frontend (Video.js)\nvideojs.log.level('debug');\n</code></pre> <p>Useful Log Messages: - <code>Session created</code>: New transcoding session started - <code>FFmpeg started</code>: FFmpeg process spawned for quality - <code>Segment completed</code>: HLS segment finished encoding - <code>Session cleaned up</code>: Inactive session removed - <code>Quality changed</code>: User switched quality level</p>"},{"location":"development/video-system/#next-steps","title":"Next Steps","text":"<ul> <li>API Reference - Video streaming endpoints</li> <li>Testing Guide - Testing video functionality</li> <li>Performance Tips - Optimization strategies</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Peek Stash Browser is configured through environment variables. This page documents all available configuration options.</p>"},{"location":"getting-started/configuration/#required-settings","title":"Required Settings","text":"<p>These environment variables must be set for Peek to function:</p> Variable Description Example <code>STASH_URL</code> Your Stash GraphQL endpoint <code>http://192.168.1.100:9999/graphql</code> <code>STASH_API_KEY</code> API key from Stash settings <code>eyJhbGciOiJIUzI1NiIsInR5cCI6...</code>"},{"location":"getting-started/configuration/#getting-your-stash-api-key","title":"Getting Your Stash API Key","text":"<ol> <li>Open Stash web interface</li> <li>Navigate to Settings \u2192 Security</li> <li>In the API Key section, click Generate</li> <li>Copy the generated key</li> <li>Use this key as <code>STASH_API_KEY</code></li> </ol>"},{"location":"getting-started/configuration/#optional-settings","title":"Optional Settings","text":"<p>These settings have sensible defaults but can be customized:</p> Variable Description Default Notes <code>DATABASE_URL</code> SQLite database file <code>file:/app/data/peek-stash-browser.db</code> Path inside container <code>CONFIG_DIR</code> App data directory <code>/app/data</code> Database + HLS cache <code>TMP_DIR</code> Transcoding temp directory <code>/app/tmp</code> Needs fast I/O <code>NODE_ENV</code> Environment mode <code>production</code> <code>development</code> or <code>production</code> <code>JWT_SECRET</code> JWT signing key Auto-generated Generate with <code>openssl rand -hex 32</code>"},{"location":"getting-started/configuration/#path-mapping-advanced","title":"Path Mapping (Advanced)","text":"<p>Peek needs to translate Stash's internal container paths to its own paths:</p> Variable Description Default When to Change <code>STASH_INTERNAL_PATH</code> Path prefix Stash uses internally <code>/data</code> If Stash uses different mount path <code>STASH_MEDIA_PATH</code> Where Peek accesses Stash's media <code>/app/media</code> Usually keep default"},{"location":"getting-started/configuration/#path-mapping-example","title":"Path Mapping Example","text":"<p>If your Stash setup looks like this:</p> <pre><code># Stash Docker container\nvolumes:\n  - /mnt/user/videos:/data\n</code></pre> <p>Stash will report paths as <code>/data/scenes/video.mp4</code>.</p> <p>Your Peek configuration should be:</p> <pre><code># Peek Docker container\nvolumes:\n  - /mnt/user/videos:/app/media:ro  # Same host path as Stash\nenvironment:\n  - STASH_INTERNAL_PATH=/data        # What Stash calls it\n  - STASH_MEDIA_PATH=/app/media      # What Peek calls it\n</code></pre> <p>This allows Peek to translate:</p> <ul> <li>Stash path: <code>/data/scenes/video.mp4</code></li> <li>To Peek path: <code>/app/media/scenes/video.mp4</code></li> </ul>"},{"location":"getting-started/configuration/#security-settings","title":"Security Settings","text":"Variable Description Default When to Use <code>SECURE_COOKIES</code> Enable secure cookie flag <code>false</code> Set to <code>true</code> when using HTTPS reverse proxy <code>JWT_SECRET</code> Secret for JWT token signing Random Generate secure random string for production <p>Security Best Practices</p> <ul> <li>Always change the default admin password</li> <li>Use a strong <code>JWT_SECRET</code> in production</li> <li>Set <code>SECURE_COOKIES=true</code> when using HTTPS</li> <li>Don't expose Peek directly to the internet without a reverse proxy</li> </ul>"},{"location":"getting-started/configuration/#generating-secure-jwt-secret","title":"Generating Secure JWT Secret","text":"<pre><code># Linux/macOS/unRAID\nopenssl rand -hex 32\n\n# Windows PowerShell\n[Convert]::ToBase64String((1..32 | ForEach-Object { Get-Random -Minimum 0 -Maximum 256 }))\n</code></pre>"},{"location":"getting-started/configuration/#example-configurations","title":"Example Configurations","text":""},{"location":"getting-started/configuration/#minimal-production-configuration","title":"Minimal Production Configuration","text":"<pre><code># Required\nSTASH_URL=http://192.168.1.100:9999/graphql\nSTASH_API_KEY=your_api_key_here\n\n# All other settings use defaults\n</code></pre>"},{"location":"getting-started/configuration/#complete-production-configuration","title":"Complete Production Configuration","text":"<pre><code># Stash Integration\nSTASH_URL=http://192.168.1.100:9999/graphql\nSTASH_API_KEY=your_api_key_here\n\n# Database\nDATABASE_URL=file:/app/data/peek-stash-browser.db\nCONFIG_DIR=/app/data\n\n# Storage\nTMP_DIR=/app/tmp\n\n# Security\nJWT_SECRET=your_very_long_random_secret_key_here\nSECURE_COOKIES=true\n\n# Path Mapping\nSTASH_INTERNAL_PATH=/data\nSTASH_MEDIA_PATH=/app/media\n\n# Environment\nNODE_ENV=production\n</code></pre>"},{"location":"getting-started/configuration/#development-configuration","title":"Development Configuration","text":"<pre><code># Stash Integration\nSTASH_URL=http://localhost:9999/graphql\nSTASH_API_KEY=your_development_api_key\n\n# Database (local SQLite file)\nDATABASE_URL=file:./data/peek-db.db\n\n# Development\nNODE_ENV=development\nJWT_SECRET=dev-secret-change-in-production\n\n# Path Mapping (for development)\nSTASH_INTERNAL_PATH=/data\nSTASH_MEDIA_PATH=/app/media\n</code></pre>"},{"location":"getting-started/configuration/#docker-compose-example","title":"Docker Compose Example","text":"<pre><code>services:\n  peek:\n    image: carrotwaxr/peek-stash-browser:latest\n    container_name: peek-stash-browser\n    ports:\n      - \"6969:80\"\n    volumes:\n      - /mnt/user/videos:/app/media:ro\n      - /mnt/user/appdata/peek-stash-browser:/app/data\n      - /mnt/user/appdata/peek-stash-browser/tmp:/app/tmp\n    environment:\n      # Required\n      - STASH_URL=http://stash:9999/graphql\n      - STASH_API_KEY=${STASH_API_KEY}\n\n      # Optional\n      - DATABASE_URL=file:/app/data/peek-db.db\n      - JWT_SECRET=${JWT_SECRET}\n      - NODE_ENV=production\n      - STASH_INTERNAL_PATH=/data\n      - STASH_MEDIA_PATH=/app/media\n    restart: unless-stopped\n</code></pre>"},{"location":"getting-started/configuration/#troubleshooting-configuration-issues","title":"Troubleshooting Configuration Issues","text":""},{"location":"getting-started/configuration/#cannot-connect-to-stash","title":"Cannot Connect to Stash","text":"<p>Check:</p> <ul> <li><code>STASH_URL</code> is accessible from the Peek container</li> <li><code>STASH_API_KEY</code> is correct and not expired</li> <li>Stash GraphQL API is enabled</li> </ul> <p>Test connectivity:</p> <pre><code>docker exec peek-stash-browser curl http://your-stash-ip:9999/graphql\n</code></pre>"},{"location":"getting-started/configuration/#videos-wont-play","title":"Videos Won't Play","text":"<p>Check:</p> <ul> <li>Media volume is mounted correctly</li> <li><code>STASH_INTERNAL_PATH</code> matches Stash's mount point</li> <li><code>STASH_MEDIA_PATH</code> matches Peek's mount point</li> <li>File permissions allow reading</li> </ul> <p>Verify path mapping:</p> <pre><code>docker exec peek-stash-browser ls -la /app/media\n</code></pre>"},{"location":"getting-started/configuration/#authentication-issues","title":"Authentication Issues","text":"<p>Check:</p> <ul> <li><code>JWT_SECRET</code> is set</li> <li><code>SECURE_COOKIES</code> matches your HTTP/HTTPS setup</li> <li>Database is writable</li> </ul>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide</li> <li>Environment Variables Reference</li> <li>Troubleshooting</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Peek Stash Browser can be deployed in several ways depending on your needs and environment.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing Peek, ensure you have:</p> <ul> <li>Stash Server running with GraphQL API enabled</li> <li>Docker installed (Docker Compose only needed for development)</li> <li>Network access from container to Stash server</li> <li>Storage space for SQLite database and transcoding temp files</li> </ul>"},{"location":"getting-started/installation/#stash-configuration","title":"Stash Configuration","text":"<ol> <li>Enable API in Stash settings</li> <li>Generate API key in Settings \u2192 Security</li> <li>Note GraphQL endpoint (usually <code>http://stash-ip:9999/graphql</code>)</li> <li>Ensure network access from your Docker host to Stash</li> </ol>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#option-1-unraid-community-applications","title":"Option 1: unRAID (Community Applications)","text":"<p>Easiest Installation Method</p> <p>This is the recommended method for unRAID users - everything is pre-configured!</p> <ol> <li>Install from Community Applications:</li> <li>Search for \"Peek Stash Browser\" in unRAID's Community Applications</li> <li>Click install and configure your settings</li> <li>Access at <code>http://your-unraid-ip:6969</code></li> </ol> <p>For detailed unRAID setup instructions, see the unRAID Deployment Guide.</p>"},{"location":"getting-started/installation/#option-2-docker-single-container","title":"Option 2: Docker (Single Container)","text":"<p>Recommended for Production</p> <p>Single container includes everything - frontend, backend, and database</p> <pre><code>docker run -d \\\n  --name peek-stash-browser \\\n  -p 6969:80 \\\n  -v /path/to/your/media:/app/media:ro \\\n  -v /path/to/peek-stash-browser/data:/app/data \\\n  -v /path/to/peek-stash-browser/tmp:/app/tmp \\\n  -e STASH_URL=\"http://your-stash-server:9999/graphql\" \\\n  -e STASH_API_KEY=\"your_stash_api_key\" \\\n  carrotwaxr/peek-stash-browser:latest\n</code></pre> <p>Volume Mounts:</p> <ul> <li><code>/path/to/your/media</code> - Your media files (read-only)</li> <li><code>/path/to/peek-stash-browser/data</code> - Database and app data</li> <li><code>/path/to/peek-stash-browser/tmp</code> - Transcoding temporary files</li> </ul> <p>Required Environment Variables:</p> <ul> <li><code>STASH_URL</code> - Your Stash GraphQL endpoint</li> <li><code>STASH_API_KEY</code> - API key from Stash settings</li> </ul> <p>See Configuration Guide for all environment variables.</p>"},{"location":"getting-started/installation/#option-3-docker-compose-development","title":"Option 3: Docker Compose (Development)","text":"<p>For Development Only</p> <p>This method is for development with hot reloading enabled</p> <ol> <li>Clone and setup:</li> </ol> <pre><code>git clone https://github.com/carrotwaxr/peek-stash-browser.git\ncd peek-stash-browser\ncp .env.example .env\n</code></pre> <ol> <li>Configure environment (edit <code>.env</code>):</li> </ol> <pre><code>STASH_URL=http://your-stash-server:9999/graphql\nSTASH_API_KEY=your_stash_api_key\nDATABASE_URL=file:./data/peek-stash-browser.db\nTMP_DIR=/path/to/temp/directory\n</code></pre> <ol> <li>Start services:</li> </ol> <pre><code>docker-compose up -d\n</code></pre> <ol> <li>Access the app: Open <code>http://localhost:6969</code></li> </ol> <p>For development setup details, see the Development Setup Guide.</p>"},{"location":"getting-started/installation/#first-access","title":"First Access","text":"<p>After installation, access Peek in your browser:</p> <ol> <li>Navigate to <code>http://localhost:6969</code> (or your server IP)</li> <li>Default login credentials:</li> <li>Username: <code>admin</code></li> <li>Password: <code>admin</code></li> <li>\u26a0\ufe0f Important: Change password immediately after first login!</li> </ol>"},{"location":"getting-started/installation/#port-configuration","title":"Port Configuration","text":"Environment Port Service Description Production <code>6969</code> Complete App nginx serves frontend + proxies API Development <code>6969</code> Frontend UI Vite dev server with hot reloading Development <code>8000</code> Backend API Express server (internal Docker network) <p>Production uses only one port!</p> <p>Production deployment exposes only port <code>6969</code> - nginx handles everything internally</p>"},{"location":"getting-started/installation/#hardware-recommendations","title":"Hardware Recommendations","text":"Component Minimum Recommended CPU 2 cores 4+ cores (for multiple transcoding streams) RAM 2GB 4GB+ Storage SSD for database SSD for database, network storage for media Network 100 Mbps Gigabit (for 4K content)"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Configure environment variables</li> <li>Quick Start Guide</li> <li>Video Playback Guide</li> <li>Troubleshooting</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get Peek up and running in 5 minutes!</p>"},{"location":"getting-started/quick-start/#step-1-install-peek","title":"Step 1: Install Peek","text":"Docker (Fastest)unRAID <pre><code>docker run -d \\\n  --name peek-stash-browser \\\n  -p 6969:80 \\\n  -v /path/to/media:/app/media:ro \\\n  -v /path/to/peek/data:/app/data \\\n  -e STASH_URL=\"http://your-stash:9999/graphql\" \\\n  -e STASH_API_KEY=\"your_api_key\" \\\n  carrotwaxr/peek-stash-browser:latest\n</code></pre> <ol> <li>Search \"Peek Stash Browser\" in Community Applications</li> <li>Click Install</li> <li>Configure Stash URL and API key</li> <li>Click Apply</li> </ol> <p>== \"Docker Compose\"</p> <pre><code>```bash\ngit clone https://github.com/carrotwaxr/peek-stash-browser.git\ncd peek-stash-browser\ncp .env.example .env\n# Edit .env with your settings\ndocker-compose up -d\n```\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-first-login","title":"Step 2: First Login","text":"<ol> <li>Open browser: <code>http://localhost:6969</code> (or your server IP)</li> <li>Login with default credentials:</li> <li>Username: <code>admin</code></li> <li>Password: <code>admin</code></li> </ol> <p>Change Password Immediately</p> <p>The default password is well-known. Change it immediately in Settings!</p>"},{"location":"getting-started/quick-start/#step-3-browse-your-library","title":"Step 3: Browse Your Library","text":"<ul> <li>Scenes: Browse all your video content</li> <li>Performers: View performers and their scenes</li> <li>Studios: Explore by production company</li> <li>Tags: Find content by tags</li> </ul>"},{"location":"getting-started/quick-start/#step-4-watch-videos","title":"Step 4: Watch Videos","text":"<ol> <li>Click any scene to view details</li> <li>Click Play to start video</li> <li>Quality automatically adjusts based on network</li> <li>Use timeline to seek through video</li> </ol>"},{"location":"getting-started/quick-start/#step-5-create-playlists","title":"Step 5: Create Playlists","text":"<ol> <li>Click Playlists in navigation</li> <li>Click Create Playlist</li> <li>Enter name and description</li> <li>Add scenes by clicking the + icon on any scene</li> <li>Play your playlist with shuffle/repeat options!</li> </ol>"},{"location":"getting-started/quick-start/#common-first-time-tasks","title":"Common First-Time Tasks","text":""},{"location":"getting-started/quick-start/#change-admin-password","title":"Change Admin Password","text":"<ol> <li>Click user icon (top right)</li> <li>Select Settings</li> <li>Enter new password</li> <li>Click Save</li> </ol>"},{"location":"getting-started/quick-start/#create-additional-users","title":"Create Additional Users","text":"<ol> <li>Go to Users (admin only)</li> <li>Click Create User</li> <li>Enter username, email, password</li> <li>Select role (Admin or User)</li> <li>Click Create</li> </ol>"},{"location":"getting-started/quick-start/#configure-theme","title":"Configure Theme","text":"<ol> <li>Click theme toggle icon (moon/sun)</li> <li>Choose Dark or Light mode</li> <li>Theme preference is saved automatically</li> </ol>"},{"location":"getting-started/quick-start/#video-playback-tips","title":"Video Playback Tips","text":"<ul> <li>Direct Play: If browser supports the format, plays directly (no transcoding)</li> <li>Transcoded: HLS streaming with adaptive quality when needed</li> <li>Seeking: Full timeline scrubbing works in both modes</li> <li>Quality: Click quality button to manually select resolution</li> </ul>"},{"location":"getting-started/quick-start/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"Key Action <code>Space</code> Play/Pause <code>\u2190</code> Seek backward 10s <code>\u2192</code> Seek forward 10s <code>\u2191</code> Volume up <code>\u2193</code> Volume down <code>F</code> Toggle fullscreen <code>M</code> Mute/unmute"},{"location":"getting-started/quick-start/#troubleshooting-first-time-issues","title":"Troubleshooting First-Time Issues","text":""},{"location":"getting-started/quick-start/#cant-login","title":"Can't Login","text":"<ul> <li>Check container logs: <code>docker logs peek-stash-browser</code></li> <li>Verify database was created in <code>/app/data</code></li> <li>Ensure <code>JWT_SECRET</code> is set (or auto-generated)</li> </ul>"},{"location":"getting-started/quick-start/#no-scenes-showing","title":"No Scenes Showing","text":"<ul> <li>Check <code>STASH_URL</code> is correct</li> <li>Verify <code>STASH_API_KEY</code> is valid</li> <li>Test Stash connectivity from container:   <pre><code>docker exec peek-stash-browser curl http://your-stash:9999/graphql\n</code></pre></li> </ul>"},{"location":"getting-started/quick-start/#videos-wont-play","title":"Videos Won't Play","text":"<ul> <li>Verify media path is mounted correctly:   <pre><code>docker exec peek-stash-browser ls /app/media\n</code></pre></li> <li>Check path mapping configuration</li> <li>Ensure FFmpeg is installed (included in official image)</li> </ul>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Full Configuration Guide</li> <li>Video Playback Details</li> <li>Playlist Features</li> <li>Complete Troubleshooting</li> </ul>"},{"location":"getting-started/quick-start/#need-help","title":"Need Help?","text":"<ul> <li>Troubleshooting Guide</li> <li>GitHub Issues</li> <li>Stash Discord - #third-party-integrations channel</li> </ul>"},{"location":"reference/faq/","title":"Frequently Asked Questions","text":"<p>Common questions about Peek Stash Browser.</p>"},{"location":"reference/faq/#general","title":"General","text":""},{"location":"reference/faq/#what-is-peek","title":"What is Peek?","text":"<p>Peek is a modern web application for browsing and streaming Stash media content with real-time HLS transcoding. It provides a fast, responsive interface with adaptive quality streaming.</p>"},{"location":"reference/faq/#how-is-peek-different-from-stash","title":"How is Peek different from Stash?","text":"<p>Peek is a browser/player focused on video playback, while Stash is a comprehensive media organizer. Peek:</p> <ul> <li>Focuses on smooth video playback with adaptive streaming</li> <li>Provides a simplified, browsing-focused interface</li> <li>Uses real-time transcoding for universal compatibility</li> <li>Complements Stash rather than replacing it</li> </ul>"},{"location":"reference/faq/#does-peek-modify-my-stash-library","title":"Does Peek modify my Stash library?","text":"<p>No. Peek is read-only. It connects to Stash's GraphQL API to read data but never modifies your library, files, or metadata.</p>"},{"location":"reference/faq/#installation","title":"Installation","text":""},{"location":"reference/faq/#what-platforms-are-supported","title":"What platforms are supported?","text":"<ul> <li>unRAID: Community Applications or manual Docker install</li> <li>Docker: Any platform supporting Docker</li> <li>Development: Node.js 18+ on Windows/Mac/Linux</li> </ul>"},{"location":"reference/faq/#do-i-need-a-separate-database-server","title":"Do I need a separate database server?","text":"<p>No. Peek uses embedded SQLite. No PostgreSQL, MySQL, or other database server needed.</p>"},{"location":"reference/faq/#can-i-run-peek-and-stash-on-the-same-server","title":"Can I run Peek and Stash on the same server?","text":"<p>Yes. They run as separate containers and don't conflict.</p>"},{"location":"reference/faq/#video-playback","title":"Video Playback","text":""},{"location":"reference/faq/#why-does-transcoding-take-so-long","title":"Why does transcoding take so long?","text":"<p>Transcoding is CPU-intensive. Performance depends on:</p> <ul> <li>Server CPU power</li> <li>Storage I/O speed (SSD vs HDD vs network)</li> <li>Original video codec and resolution</li> <li>Target quality selected</li> </ul> <p>For best performance, use local SSD storage and allocate 2-4 CPU cores.</p>"},{"location":"reference/faq/#why-cant-i-play-videos-directly-without-transcoding","title":"Why can't I play videos directly without transcoding?","text":"<p>Direct play is planned but not yet implemented. Currently, all videos are transcoded to HLS for:</p> <ul> <li>Universal browser compatibility</li> <li>Adaptive quality switching</li> <li>Fast seeking with HLS segments</li> <li>Consistent playback experience</li> </ul>"},{"location":"reference/faq/#can-i-download-the-original-video-file","title":"Can I download the original video file?","text":"<p>Original file downloads are planned but not yet implemented. Currently, only transcoded HLS streams are available for playback.</p>"},{"location":"reference/faq/#configuration","title":"Configuration","text":""},{"location":"reference/faq/#where-are-my-settings-stored","title":"Where are my settings stored?","text":"<ul> <li>User preferences: SQLite database in <code>/app/data/peek-db.db</code></li> <li>Server config: Environment variables</li> <li>Temp files: <code>/app/data/hls-cache/</code> (auto-cleaned)</li> </ul>"},{"location":"reference/faq/#how-do-i-backup-my-data","title":"How do I backup my data?","text":"<pre><code># Backup SQLite database\ndocker exec peek-stash-browser sqlite3 /app/data/peek-db.db \".backup /app/data/backup.db\"\n\n# Copy backup out of container\ndocker cp peek-stash-browser:/app/data/backup.db ./peek-backup.db\n</code></pre>"},{"location":"reference/faq/#can-i-customize-the-theme","title":"Can I customize the theme?","text":"<p>Dark and light themes are built-in. Custom themes and color schemes are planned for a future release.</p>"},{"location":"reference/faq/#performance","title":"Performance","text":""},{"location":"reference/faq/#how-many-concurrent-streams-can-peek-handle","title":"How many concurrent streams can Peek handle?","text":"<p>Depends on server CPU:</p> <ul> <li>2 CPU cores: 1-2 streams at 720p</li> <li>4 CPU cores: 3-4 streams at 720p</li> <li>6+ CPU cores: 5+ streams at 720p</li> </ul> <p>Lower qualities (480p, 360p) require less CPU and support more concurrent streams.</p>"},{"location":"reference/faq/#why-is-my-media-loading-slowly","title":"Why is my media loading slowly?","text":"<p>Check storage speed:</p> <pre><code>docker exec peek-stash-browser dd if=/app/media/test.mp4 of=/dev/null bs=1M count=100\n</code></pre> <p>If &lt; 50 MB/s, media is likely on: - Network share (SMB/NFS) - Move to local storage - Slow HDD - Upgrade to SSD - USB drive - Use internal storage</p>"},{"location":"reference/faq/#how-much-disk-space-does-peek-need","title":"How much disk space does Peek need?","text":"<ul> <li>App data: ~100 MB (database, config)</li> <li>Temp files: ~50-100 MB per quality per minute of video</li> <li>Recommendation: 5-10 GB for temp storage on busy servers</li> </ul> <p>Temp files are automatically cleaned up after 30 minutes.</p>"},{"location":"reference/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/faq/#videos-wont-play","title":"Videos won't play","text":"<ol> <li>Check FFmpeg is installed: <code>docker exec peek-stash-browser ffmpeg -version</code></li> <li>Verify path mapping is correct</li> <li>Check file permissions on media</li> <li>Review backend logs for errors</li> </ol> <p>See: Troubleshooting Guide</p>"},{"location":"reference/faq/#cant-connect-to-stash","title":"Can't connect to Stash","text":"<ol> <li>Verify <code>STASH_URL</code> is correct and accessible from container</li> <li>Check Stash API key is valid</li> <li>Test connectivity: <code>docker exec peek-stash-browser curl http://stash:9999/graphql</code></li> </ol>"},{"location":"reference/faq/#login-doesnt-work","title":"Login doesn't work","text":"<ul> <li>Check cookies are enabled</li> <li>Verify <code>JWT_SECRET</code> is set</li> <li>Try incognito mode</li> <li>Clear browser cache</li> </ul>"},{"location":"reference/faq/#features","title":"Features","text":""},{"location":"reference/faq/#when-will-playlists-be-available","title":"When will playlists be available?","text":"<p>Playlists are planned for a future release. Track progress on GitHub Issues.</p>"},{"location":"reference/faq/#can-i-use-peek-on-mobile","title":"Can I use Peek on mobile?","text":"<p>Yes. The web interface is responsive and works on mobile browsers. A dedicated mobile app is not currently planned.</p>"},{"location":"reference/faq/#does-peek-support-hardware-transcoding","title":"Does Peek support hardware transcoding?","text":"<p>Not yet. Hardware-accelerated transcoding (GPU) is planned for a future release to improve performance and reduce CPU usage.</p>"},{"location":"reference/faq/#can-i-use-peek-without-stash","title":"Can I use Peek without Stash?","text":"<p>No. Peek requires a Stash server for media library management and metadata. Peek is designed as a companion to Stash, not a replacement.</p>"},{"location":"reference/faq/#security","title":"Security","text":""},{"location":"reference/faq/#is-peek-secure","title":"Is Peek secure?","text":"<p>Peek includes: - JWT authentication - Bcrypt password hashing - Read-only media access - Session management</p> <p>Important: Change the default admin password immediately!</p> <p>See: Security Best Practices</p>"},{"location":"reference/faq/#should-i-expose-peek-to-the-internet","title":"Should I expose Peek to the internet?","text":"<p>No. Peek is designed for local network use. For remote access: - Use VPN - Use reverse proxy with authentication layer - Don't expose directly to internet</p>"},{"location":"reference/faq/#support","title":"Support","text":""},{"location":"reference/faq/#where-can-i-get-help","title":"Where can I get help?","text":"<ul> <li>Documentation: https://carrotwaxr.github.io/peek-stash-browser</li> <li>GitHub Issues: Bug reports and feature requests</li> <li>Stash Discord: #third-party-integrations channel</li> </ul>"},{"location":"reference/faq/#how-do-i-report-a-bug","title":"How do I report a bug?","text":"<ol> <li>Search existing issues first</li> <li>Gather logs and error messages</li> <li>Create detailed issue on GitHub</li> <li>Include: version, platform, steps to reproduce</li> </ol> <p>See: Contributing Guide</p>"},{"location":"reference/faq/#can-i-contribute","title":"Can I contribute?","text":"<p>Yes! Contributions are welcome: - Code improvements - Bug fixes - Documentation - Translations (future)</p> <p>See: Contributing Guide</p>"},{"location":"reference/faq/#next-steps","title":"Next Steps","text":"<ul> <li>Installation - Install Peek</li> <li>Troubleshooting - Fix common issues</li> <li>Performance Tips - Optimize performance</li> </ul>"},{"location":"reference/performance/","title":"Performance Tips","text":"<p>Optimize Peek Stash Browser for the best performance.</p>"},{"location":"reference/performance/#hardware-recommendations","title":"Hardware Recommendations","text":"Resource Minimum Recommended Optimal CPU 2 cores 4 cores 6+ cores RAM 2 GB 4 GB 8+ GB Storage HDD SSD (appdata) NVMe SSD Network 100 Mbps 1 Gbps 1 Gbps+"},{"location":"reference/performance/#server-optimization","title":"Server Optimization","text":""},{"location":"reference/performance/#media-storage","title":"Media Storage","text":"<ul> <li>Use local storage: Network shares (SMB/NFS) are 10-50x slower</li> <li>Use SSD for temp files: Store <code>CONFIG_DIR</code> on fast storage</li> <li>Keep media accessible: Avoid remote mounts when possible</li> </ul>"},{"location":"reference/performance/#transcoding-performance","title":"Transcoding Performance","text":"<ul> <li>Allocate sufficient CPU: Each stream needs ~0.5-1 CPU core</li> <li>Use lower qualities: 360p/480p transcode faster than 720p</li> <li>Limit concurrent streams: Each stream adds CPU load</li> </ul>"},{"location":"reference/performance/#docker-configuration","title":"Docker Configuration","text":"<pre><code># docker-compose.yml\nservices:\n  peek:\n    cpus: \"4\"        # Limit to 4 CPUs\n    mem_limit: 4g    # Limit to 4GB RAM\n    volumes:\n      - /mnt/ssd/media:/app/media:ro  # Fast local storage\n      - /mnt/ssd/appdata:/app/data     # SSD for database/cache\n</code></pre>"},{"location":"reference/performance/#client-optimization","title":"Client Optimization","text":""},{"location":"reference/performance/#browser-performance","title":"Browser Performance","text":"<ul> <li>Use Chrome/Edge: Best Video.js performance</li> <li>Keep browser updated: Latest versions have performance improvements</li> <li>Close unused tabs: Reduces memory usage</li> <li>Disable extensions: Some extensions slow down video playback</li> </ul>"},{"location":"reference/performance/#network-performance","title":"Network Performance","text":"<ul> <li>Use wired connection: WiFi adds latency and packet loss</li> <li>QoS prioritization: Prioritize video streaming traffic</li> <li>Reduce quality on slow connections: Use 360p/480p for &lt; 5 Mbps</li> </ul>"},{"location":"reference/performance/#database-performance","title":"Database Performance","text":""},{"location":"reference/performance/#sqlite-optimization","title":"SQLite Optimization","text":"<pre><code># Vacuum database periodically\ndocker exec peek-stash-browser sqlite3 /app/data/peek-db.db \"VACUUM;\"\n\n# Analyze tables\ndocker exec peek-stash-browser sqlite3 /app/data/peek-db.db \"ANALYZE;\"\n</code></pre>"},{"location":"reference/performance/#backup-without-downtime","title":"Backup Without Downtime","text":"<pre><code># Online backup\ndocker exec peek-stash-browser sqlite3 /app/data/peek-db.db \".backup /app/data/backup.db\"\n</code></pre>"},{"location":"reference/performance/#monitoring","title":"Monitoring","text":""},{"location":"reference/performance/#check-resource-usage","title":"Check Resource Usage","text":"<pre><code># Docker stats\ndocker stats peek-stash-browser\n\n# Check transcoding sessions\ndocker exec peek-stash-browser ls -la /app/data/hls-cache/\n\n# Check disk usage\ndocker exec peek-stash-browser du -sh /app/data/hls-cache/\n</code></pre>"},{"location":"reference/performance/#performance-metrics","title":"Performance Metrics","text":"<p>Good performance indicators: - CPU usage: &lt; 80% during transcoding - Memory usage: &lt; 2 GB for typical workload - Disk I/O: &gt; 50 MB/s read speed - Transcoding speed: &gt; 0.8x (real-time or faster)</p>"},{"location":"reference/performance/#troubleshooting-slow-performance","title":"Troubleshooting Slow Performance","text":""},{"location":"reference/performance/#identify-bottleneck","title":"Identify Bottleneck","text":"<ol> <li>Check CPU: <code>docker stats</code> - High CPU? Reduce quality or streams</li> <li>Check Memory: Low memory? Increase Docker memory limit</li> <li>Check I/O: Slow disk? Move to SSD or local storage</li> <li>Check Network: Slow network? Reduce quality</li> </ol>"},{"location":"reference/performance/#common-solutions","title":"Common Solutions","text":"<ul> <li>Buffering/stuttering: Reduce quality, check I/O speed</li> <li>Slow seeking: Media on slow storage</li> <li>High CPU: Too many streams, reduce quality</li> <li>Slow page loads: Check browser cache, network speed</li> </ul>"},{"location":"reference/performance/#next-steps","title":"Next Steps","text":"<ul> <li>Troubleshooting - Fix common issues</li> <li>Video System - Understand transcoding</li> </ul>"},{"location":"reference/security/","title":"Security Best Practices","text":"<p>Protect your Peek installation and user data.</p>"},{"location":"reference/security/#default-credentials","title":"Default Credentials","text":"<p>Change Default Password Immediately</p> <p>Default credentials: <code>admin</code> / <code>admin</code></p> <p>This is well-known and must be changed after first login!</p>"},{"location":"reference/security/#authentication-security","title":"Authentication Security","text":""},{"location":"reference/security/#strong-passwords","title":"Strong Passwords","text":"<ul> <li>Minimum 12 characters recommended</li> <li>Use mix of uppercase, lowercase, numbers, symbols</li> <li>Don't reuse passwords from other services</li> <li>Consider using a password manager</li> </ul>"},{"location":"reference/security/#jwt-secret","title":"JWT Secret","text":"<p>Generate a strong JWT secret:</p> <pre><code># Generate 32-byte random secret\nopenssl rand -hex 32\n</code></pre> <p>Add to <code>.env</code>: <pre><code>JWT_SECRET=your-generated-secret-here\n</code></pre></p>"},{"location":"reference/security/#session-management","title":"Session Management","text":"<ul> <li>Sessions expire after 24 hours (configurable)</li> <li>Revoke sessions when logging out from shared devices</li> <li>Review active sessions regularly in Settings</li> </ul>"},{"location":"reference/security/#network-security","title":"Network Security","text":""},{"location":"reference/security/#dont-expose-to-internet","title":"Don't Expose to Internet","text":"<p>Peek is designed for local network use only.</p> <p>Recommended: - Access via VPN when remote - Use reverse proxy with authentication (Authelia, etc.) - Keep on local network only</p> <p>Not Recommended: - Direct port forwarding to internet - Public IP access without authentication layer</p>"},{"location":"reference/security/#reverse-proxy-setup","title":"Reverse Proxy Setup","text":"<p>If using reverse proxy (Nginx, Caddy, Traefik):</p> <pre><code># Set secure cookies\nSECURE_COOKIES=true\n\n# Behind proxy\n# Ensure X-Forwarded-For headers are passed\n</code></pre> <p>Nginx example: <pre><code>location / {\n    proxy_pass http://peek:80;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n}\n</code></pre></p>"},{"location":"reference/security/#httpstls","title":"HTTPS/TLS","text":"<p>When using HTTPS:</p> <ol> <li>Configure reverse proxy with valid TLS certificate</li> <li>Set <code>SECURE_COOKIES=true</code></li> <li>Force HTTPS redirects in reverse proxy</li> <li>Use HTTP Strict Transport Security (HSTS)</li> </ol>"},{"location":"reference/security/#file-security","title":"File Security","text":""},{"location":"reference/security/#read-only-media-mount","title":"Read-Only Media Mount","text":"<p>Always mount media as read-only:</p> <pre><code>volumes:\n  - /mnt/media:/app/media:ro  # :ro = read-only\n</code></pre>"},{"location":"reference/security/#temp-file-cleanup","title":"Temp File Cleanup","text":"<p>Peek automatically cleans up transcoding temp files after 30 minutes.</p> <p>Manual cleanup if needed: <pre><code>docker exec peek-stash-browser rm -rf /app/data/hls-cache/*\n</code></pre></p>"},{"location":"reference/security/#database-backups","title":"Database Backups","text":"<p>Regular backups protect against data loss:</p> <pre><code># Backup script\n#!/bin/bash\nDATE=$(date +%Y%m%d)\ndocker exec peek-stash-browser sqlite3 /app/data/peek-db.db \".backup /app/data/backup-$DATE.db\"\n</code></pre>"},{"location":"reference/security/#user-management","title":"User Management","text":""},{"location":"reference/security/#principle-of-least-privilege","title":"Principle of Least Privilege","text":"<ul> <li>Create regular user accounts for daily use</li> <li>Reserve admin account for administration only</li> <li>Don't share admin credentials</li> </ul>"},{"location":"reference/security/#disable-unused-accounts","title":"Disable Unused Accounts","text":"<p>Regularly audit and disable: - Inactive users - Former users - Test accounts</p>"},{"location":"reference/security/#environment-variables","title":"Environment Variables","text":""},{"location":"reference/security/#protect-secrets","title":"Protect Secrets","text":"<p>Never commit <code>.env</code> files to version control:</p> <pre><code># .gitignore\n.env\n.env.local\n.env.production\n</code></pre>"},{"location":"reference/security/#stash-api-key","title":"Stash API Key","text":"<p>Protect your Stash API key: - Don't share publicly - Rotate if compromised - Use environment variables, not hardcoded</p>"},{"location":"reference/security/#docker-security","title":"Docker Security","text":""},{"location":"reference/security/#run-as-non-root","title":"Run as Non-Root","text":"<p>Peek container runs as non-root user for security.</p>"},{"location":"reference/security/#resource-limits","title":"Resource Limits","text":"<p>Prevent resource exhaustion:</p> <pre><code>services:\n  peek:\n    cpus: \"4\"\n    mem_limit: 4g\n    pids_limit: 200\n</code></pre>"},{"location":"reference/security/#keep-updated","title":"Keep Updated","text":"<ul> <li>Update Peek container regularly</li> <li>Update base OS and Docker</li> <li>Subscribe to security advisories</li> </ul>"},{"location":"reference/security/#monitoring","title":"Monitoring","text":""},{"location":"reference/security/#audit-logs","title":"Audit Logs","text":"<p>Review logs for suspicious activity:</p> <pre><code># Check for failed login attempts\ndocker logs peek-stash-browser | grep \"401\"\n\n# Check for unusual API access\ndocker logs peek-stash-browser | grep \"Unauthorized\"\n</code></pre>"},{"location":"reference/security/#failed-login-attempts","title":"Failed Login Attempts","text":"<p>Monitor for brute force attempts (future feature): - Account lockout after N failed attempts - IP-based rate limiting - Email notifications for suspicious activity</p>"},{"location":"reference/security/#incident-response","title":"Incident Response","text":""},{"location":"reference/security/#if-compromised","title":"If Compromised","text":"<ol> <li>Immediately change admin password</li> <li>Revoke all active sessions</li> <li>Review audit logs for unauthorized access</li> <li>Check for unauthorized users</li> <li>Rotate JWT_SECRET</li> <li>Rotate Stash API key if exposed</li> </ol>"},{"location":"reference/security/#data-breach","title":"Data Breach","text":"<p>If database is compromised: 1. All user passwords are bcrypt hashed (safe) 2. Change passwords as precaution 3. Rotate JWT_SECRET 4. Review what data was accessible</p>"},{"location":"reference/security/#security-checklist","title":"Security Checklist","text":"<ul> <li> Changed default admin password</li> <li> Generated strong JWT_SECRET</li> <li> Media mounted read-only</li> <li> Not exposed to public internet</li> <li> Using HTTPS (if remote access)</li> <li> SECURE_COOKIES enabled (if HTTPS)</li> <li> Regular database backups</li> <li> Docker container updated</li> <li> Audit logs reviewed periodically</li> <li> Unused accounts disabled</li> </ul>"},{"location":"reference/security/#reporting-security-issues","title":"Reporting Security Issues","text":"<p>Found a security vulnerability?</p> <p>Do NOT open a public GitHub issue.</p> <p>Instead: 1. Email: security@[project-email] (if available) 2. Or create private security advisory on GitHub 3. Include: description, impact, reproduction steps</p> <p>We'll respond within 48 hours.</p>"},{"location":"reference/security/#next-steps","title":"Next Steps","text":"<ul> <li>Troubleshooting - Fix security-related issues</li> <li>Settings - Configure security settings</li> <li>unRAID Deployment - Secure deployment guide</li> </ul>"},{"location":"reference/troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions for Peek Stash Browser.</p>"},{"location":"reference/troubleshooting/#installation-setup","title":"Installation &amp; Setup","text":""},{"location":"reference/troubleshooting/#container-wont-start","title":"Container Won't Start","text":"<p>Check logs first: <pre><code>docker logs peek-stash-browser\n</code></pre></p> <p>Common causes: - Missing required environment variables (<code>STASH_URL</code>, <code>STASH_API_KEY</code>) - Invalid <code>STASH_URL</code> (not accessible from container) - Port conflicts (6969 already in use) - Missing volume mappings</p> <p>Solution: <pre><code># Stop container\ndocker stop peek-stash-browser\n\n# Remove container\ndocker rm peek-stash-browser\n\n# Recreate with correct configuration\n# (use your template or docker-compose)\n</code></pre></p>"},{"location":"reference/troubleshooting/#cant-connect-to-stash","title":"Can't Connect to Stash","text":"<p>Test connectivity from container: <pre><code>docker exec peek-stash-browser curl http://your-stash-ip:9999/graphql\n</code></pre></p> <p>Solutions: - Verify <code>STASH_URL</code> is correct and accessible - Check Stash API key is valid (Settings \u2192 Security \u2192 API Key) - Ensure Stash GraphQL endpoint is enabled - Check firewall rules between containers</p>"},{"location":"reference/troubleshooting/#video-playback","title":"Video Playback","text":"<p>See also: Video Playback Guide</p>"},{"location":"reference/troubleshooting/#videos-wont-play","title":"Videos Won't Play","text":"<ol> <li>Check FFmpeg: <code>docker exec peek-stash-browser ffmpeg -version</code></li> <li>Check file permissions: <code>docker exec peek-stash-browser ls -la /app/media</code></li> <li>Verify path mapping: Check <code>STASH_INTERNAL_PATH</code> and <code>STASH_MEDIA_PATH</code></li> <li>Check backend logs: <code>docker logs peek-stash-browser</code></li> </ol>"},{"location":"reference/troubleshooting/#slow-transcoding","title":"Slow Transcoding","text":"<p>Check I/O performance: <pre><code>docker exec peek-stash-browser dd if=/app/media/test.mp4 of=/dev/null bs=1M count=100\n</code></pre></p> <p>Expected: 50+ MB/s for good performance</p> <p>Solutions: - Move media to local storage (not network share) - Use SSD for media and temp files - Reduce quality preset - Allocate more CPU to container</p>"},{"location":"reference/troubleshooting/#authentication","title":"Authentication","text":""},{"location":"reference/troubleshooting/#cant-login","title":"Can't Login","text":"<ul> <li>Verify username/password</li> <li>Check if cookies are enabled in browser</li> <li>Clear browser cache and cookies</li> <li>Try incognito/private browsing mode</li> </ul>"},{"location":"reference/troubleshooting/#session-expires-immediately","title":"Session Expires Immediately","text":"<ul> <li>Check <code>JWT_SECRET</code> is set</li> <li>Verify <code>SECURE_COOKIES</code> matches your setup (false for HTTP)</li> <li>Clear browser cookies</li> <li>Check system clock is correct</li> </ul>"},{"location":"reference/troubleshooting/#network-performance","title":"Network &amp; Performance","text":""},{"location":"reference/troubleshooting/#slow-page-loading","title":"Slow Page Loading","text":"<ul> <li>Check server CPU/memory usage</li> <li>Clear browser cache</li> <li>Verify network speed</li> <li>Check for console errors (F12 \u2192 Console)</li> </ul>"},{"location":"reference/troubleshooting/#images-not-loading","title":"Images Not Loading","text":"<ul> <li>Check Stash is accessible</li> <li>Verify <code>STASH_URL</code> is correct</li> <li>Check browser console for CORS errors</li> <li>Try clearing cache</li> </ul>"},{"location":"reference/troubleshooting/#database","title":"Database","text":""},{"location":"reference/troubleshooting/#database-locked-error","title":"Database Locked Error","text":"<pre><code># Stop container\ndocker stop peek-stash-browser\n\n# Remove lock file\ndocker run --rm -v peek-data:/app/data busybox rm /app/data/peek-db.db-wal\n\n# Restart container\ndocker start peek-stash-browser\n</code></pre>"},{"location":"reference/troubleshooting/#reset-database","title":"Reset Database","text":"<p>This Deletes All Data</p> <p>This will delete all users, preferences, and playlists.</p> <pre><code>docker stop peek-stash-browser\ndocker run --rm -v peek-data:/app/data busybox rm /app/data/peek-db.db\ndocker start peek-stash-browser\n</code></pre>"},{"location":"reference/troubleshooting/#logs-debugging","title":"Logs &amp; Debugging","text":""},{"location":"reference/troubleshooting/#viewing-logs","title":"Viewing Logs","text":"<pre><code># All logs\ndocker logs peek-stash-browser\n\n# Follow logs (live)\ndocker logs -f peek-stash-browser\n\n# Last 100 lines\ndocker logs --tail 100 peek-stash-browser\n</code></pre>"},{"location":"reference/troubleshooting/#enable-debug-logging","title":"Enable Debug Logging","text":"<p>Add to environment variables: <pre><code>LOG_LEVEL=debug\n</code></pre></p>"},{"location":"reference/troubleshooting/#browser-console","title":"Browser Console","text":"<p>Check browser console for frontend errors:</p> <ol> <li>Press F12 to open DevTools</li> <li>Click Console tab</li> <li>Look for red errors</li> <li>Copy error messages when reporting issues</li> </ol>"},{"location":"reference/troubleshooting/#common-error-messages","title":"Common Error Messages","text":""},{"location":"reference/troubleshooting/#ffmpeg-not-found","title":"\"FFmpeg not found\"","text":"<p>Solution: Rebuild container or verify FFmpeg is installed in image</p>"},{"location":"reference/troubleshooting/#path-translation-failed","title":"\"Path translation failed\"","text":"<p>Solution: Check <code>STASH_INTERNAL_PATH</code> and <code>STASH_MEDIA_PATH</code> environment variables</p>"},{"location":"reference/troubleshooting/#session-not-found","title":"\"Session not found\"","text":"<p>Solution: Session expired (30 min timeout). Refresh page and try again.</p>"},{"location":"reference/troubleshooting/#unauthorized","title":"\"Unauthorized\"","text":"<p>Solution: Token expired. Logout and login again.</p>"},{"location":"reference/troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"reference/troubleshooting/#before-asking-for-help","title":"Before Asking for Help","text":"<ol> <li>Check this troubleshooting guide</li> <li>Search existing GitHub Issues</li> <li>Check browser console for errors</li> <li>Gather logs and error messages</li> </ol>"},{"location":"reference/troubleshooting/#creating-a-bug-report","title":"Creating a Bug Report","text":"<p>Include:</p> <ul> <li>Peek version: Check Settings \u2192 About</li> <li>Platform: unRAID / Docker / Development</li> <li>Browser: Chrome 120 / Firefox 121 / etc.</li> <li>Stash version: Your Stash server version</li> <li>Error logs: Backend and browser console</li> <li>Steps to reproduce: Detailed steps</li> <li>Screenshots: If applicable</li> </ul>"},{"location":"reference/troubleshooting/#where-to-get-help","title":"Where to Get Help","text":"<ul> <li>GitHub Issues: https://github.com/carrotwaxr/peek-stash-browser/issues</li> <li>Stash Discord: #third-party-integrations channel</li> <li>Documentation: https://carrotwaxr.github.io/peek-stash-browser</li> </ul>"},{"location":"reference/troubleshooting/#next-steps","title":"Next Steps","text":"<ul> <li>FAQ - Frequently asked questions</li> <li>Performance Tips - Optimize performance</li> <li>Security - Security best practices</li> </ul>"},{"location":"user-guide/keyboard-navigation/","title":"Keyboard Navigation","text":"<p>Peek Stash Browser features comprehensive keyboard navigation designed for desktop users and TV remote controls. Navigate the entire app without touching your mouse or touchscreen.</p>"},{"location":"user-guide/keyboard-navigation/#overview","title":"Overview","text":"<p>The keyboard navigation system provides:</p> <ul> <li>Spatial 2D grid navigation - Navigate scene cards like Netflix on TV</li> <li>Media key support - Control video playback with media keys or shortcuts</li> <li>Focus indicators - Clear visual feedback showing your current position</li> <li>Tab trapping - Keep focus within modals and dialogs</li> <li>Auto-focus - Pages automatically focus the first meaningful element</li> </ul>"},{"location":"user-guide/keyboard-navigation/#grid-navigation","title":"Grid Navigation","text":"<p>When browsing any list page (Scenes, Performers, Studios, or Tags):</p>"},{"location":"user-guide/keyboard-navigation/#arrow-keys","title":"Arrow Keys","text":"<ul> <li>Left Arrow - Move to previous item</li> <li>Right Arrow - Move to next item</li> <li>Up Arrow - Move up one row</li> <li>Down Arrow - Move down one row</li> </ul>"},{"location":"user-guide/keyboard-navigation/#selection","title":"Selection","text":"<ul> <li>Enter or Space - Open the focused scene/item</li> <li>Home - Jump to first item</li> <li>End - Jump to last item</li> </ul>"},{"location":"user-guide/keyboard-navigation/#pagination","title":"Pagination","text":"<ul> <li>Page Up - Go to previous page</li> <li>Page Down - Go to next page</li> </ul>"},{"location":"user-guide/keyboard-navigation/#visual-feedback","title":"Visual Feedback","text":"<p>Focused items show a prominent blue glow with:</p> <ul> <li>Thick blue border</li> <li>Pulsing animation</li> <li>Slight scale increase</li> <li>Shadow highlighting</li> </ul>"},{"location":"user-guide/keyboard-navigation/#video-player-controls","title":"Video Player Controls","text":""},{"location":"user-guide/keyboard-navigation/#playback-controls","title":"Playback Controls","text":"<ul> <li>Space - Play/Pause toggle</li> <li>M - Mute/Unmute</li> <li>F - Toggle fullscreen</li> </ul>"},{"location":"user-guide/keyboard-navigation/#seeking","title":"Seeking","text":"<ul> <li>Ctrl + Right Arrow (or Cmd + Right Arrow on Mac) - Seek forward 10 seconds</li> <li>Ctrl + Left Arrow (or Cmd + Left Arrow on Mac) - Seek backward 10 seconds</li> </ul>"},{"location":"user-guide/keyboard-navigation/#volume","title":"Volume","text":"<ul> <li>Ctrl + Up Arrow (or Cmd + Up Arrow on Mac) - Volume up</li> <li>Ctrl + Down Arrow (or Cmd + Down Arrow on Mac) - Volume down</li> </ul>"},{"location":"user-guide/keyboard-navigation/#playlist-navigation","title":"Playlist Navigation","text":"<p>When watching a playlist:</p> <ul> <li>Media Next Track - Play next scene in playlist</li> <li>Media Previous Track - Play previous scene in playlist</li> </ul> <p>The next/previous track keys only work when you're in a playlist. They have no effect when watching a standalone scene.</p>"},{"location":"user-guide/keyboard-navigation/#media-remote-support","title":"Media Remote Support","text":"<p>Peek supports standard media remote buttons:</p> <ul> <li>Play/Pause Button - Toggle video playback</li> <li>Next Track Button - Next scene in playlist</li> <li>Previous Track Button - Previous scene in playlist</li> <li>Fast Forward Button - Seek forward 10 seconds</li> <li>Rewind Button - Seek backward 10 seconds</li> </ul> <p>These media keys work on:</p> <ul> <li>Keyboards with dedicated media keys</li> <li>Bluetooth media remotes</li> <li>TV remotes (via Bluetooth or HDMI-CEC)</li> <li>Wireless game controllers</li> </ul>"},{"location":"user-guide/keyboard-navigation/#modal-and-dialog-navigation","title":"Modal and Dialog Navigation","text":"<p>When a modal or dialog is open:</p> <ul> <li>Tab - Move to next focusable element</li> <li>Shift + Tab - Move to previous focusable element</li> <li>Escape - Close the modal/dialog</li> </ul> <p>Focus is automatically trapped within modals - you cannot Tab outside of them. When a modal closes, focus returns to the element that opened it.</p>"},{"location":"user-guide/keyboard-navigation/#initial-focus-behavior","title":"Initial Focus Behavior","text":"<p>Each page automatically focuses the first meaningful interactive element:</p> <ul> <li>Home Page - First scene card in the first carousel</li> <li>Scenes Page - First scene card in the grid</li> <li>Scene Detail Page - Video player play button</li> <li>Settings Pages - First input field or button</li> </ul> <p>This allows you to start navigating immediately after page load.</p>"},{"location":"user-guide/keyboard-navigation/#text-input-handling","title":"Text Input Handling","text":"<p>When typing in search boxes or text inputs:</p> <ul> <li>Arrow keys work normally within the input (move cursor)</li> <li>Tab moves to the next input field</li> <li>Escape clears focus from the input and returns to grid navigation</li> </ul>"},{"location":"user-guide/keyboard-navigation/#accessibility","title":"Accessibility","text":"<p>The keyboard navigation system is designed to be accessible:</p> <ul> <li>Focus visible - Always clear what element has focus</li> <li>Logical tab order - Tab moves through elements in a logical sequence</li> <li>ARIA labels - Screen reader friendly</li> <li>No keyboard traps - Can always navigate away or close modals</li> </ul>"},{"location":"user-guide/keyboard-navigation/#tips-for-tv-usage","title":"Tips for TV Usage","text":"<p>Using Peek on a TV with a Bluetooth remote:</p> <ol> <li>Navigate grids - Use directional pad (D-pad) arrow keys</li> <li>Select items - Use OK/Enter button on remote</li> <li>Control video - Use remote's media keys (play/pause, etc.)</li> <li>Go back - Use remote's Back button or browser back navigation</li> <li>Adjust volume - Use remote's volume keys with Ctrl modifier</li> </ol>"},{"location":"user-guide/keyboard-navigation/#keyboard-shortcuts-quick-reference","title":"Keyboard Shortcuts Quick Reference","text":""},{"location":"user-guide/keyboard-navigation/#scene-grid","title":"Scene Grid","text":"Key Action \u2190 \u2192 \u2191 \u2193 Navigate grid Enter / Space Select item Page Up / Down Change page Home First item End Last item"},{"location":"user-guide/keyboard-navigation/#video-player","title":"Video Player","text":"Key Action Space Play/Pause M Mute F Fullscreen Ctrl + \u2190 \u2192 Seek Ctrl + \u2191 \u2193 Volume"},{"location":"user-guide/keyboard-navigation/#playlist","title":"Playlist","text":"Key Action Media Next Next scene Media Previous Previous scene"},{"location":"user-guide/keyboard-navigation/#modals","title":"Modals","text":"Key Action Tab Next element Shift + Tab Previous element Escape Close"},{"location":"user-guide/keyboard-navigation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/keyboard-navigation/#arrow-keys-dont-work","title":"Arrow keys don't work","text":"<ul> <li>In search boxes: Arrow keys move the cursor within the input. Press Escape to exit the input field first.</li> <li>Page not loaded: Wait for the page to fully load. The grid must be rendered before navigation works.</li> <li>JavaScript disabled: Keyboard navigation requires JavaScript to be enabled.</li> </ul>"},{"location":"user-guide/keyboard-navigation/#focus-indicator-not-visible","title":"Focus indicator not visible","text":"<ul> <li>The focus indicator should be a prominent blue glow. If you don't see it:</li> <li>Check that your browser supports CSS custom properties</li> <li>Try refreshing the page</li> <li>Check browser console for errors</li> </ul>"},{"location":"user-guide/keyboard-navigation/#media-keys-dont-work","title":"Media keys don't work","text":"<ul> <li>Media keys only work when:</li> <li>Video player is loaded (not on poster screen)</li> <li>You're watching a video in a playlist (for next/prev)</li> <li>Focus is not in a text input field</li> </ul>"},{"location":"user-guide/keyboard-navigation/#tab-gets-stuck-in-modal","title":"Tab gets stuck in modal","text":"<ul> <li>This is intentional! Modals trap focus.</li> <li>Press Escape to close the modal and return focus to the main page.</li> </ul>"},{"location":"user-guide/keyboard-navigation/#browser-compatibility","title":"Browser Compatibility","text":"<p>Keyboard navigation works in all modern browsers:</p> <ul> <li>Chrome/Edge 90+</li> <li>Firefox 88+</li> <li>Safari 14+</li> <li>Opera 76+</li> </ul> <p>Older browsers may have limited keyboard support or visual glitches with focus indicators.</p>"},{"location":"user-guide/playlists/","title":"Playlists","text":"<p>Coming Soon</p> <p>Playlist functionality is planned for a future release. This page will be updated when the feature is available.</p>"},{"location":"user-guide/playlists/#planned-features","title":"Planned Features","text":""},{"location":"user-guide/playlists/#creating-playlists","title":"Creating Playlists","text":"<ul> <li>Create custom playlists from your favorite scenes</li> <li>Add/remove scenes easily</li> <li>Reorder scenes with drag-and-drop</li> <li>Name and describe playlists</li> </ul>"},{"location":"user-guide/playlists/#playing-playlists","title":"Playing Playlists","text":"<ul> <li>Continuous playback through all playlist items</li> <li>Shuffle mode for random playback order</li> <li>Repeat modes (repeat all, repeat one)</li> <li>Skip to next/previous scene</li> </ul>"},{"location":"user-guide/playlists/#managing-playlists","title":"Managing Playlists","text":"<ul> <li>Edit playlist details</li> <li>Delete playlists</li> <li>Share playlists (export as M3U)</li> <li>Import existing M3U playlists</li> </ul>"},{"location":"user-guide/playlists/#smart-playlists","title":"Smart Playlists","text":"<ul> <li>Auto-generate playlists based on criteria</li> <li>Filter by performers, tags, studios</li> <li>Sort by rating, date, duration</li> <li>Dynamic playlists that update automatically</li> </ul>"},{"location":"user-guide/playlists/#implementation-status","title":"Implementation Status","text":"<p>Track playlist feature development:</p> <ul> <li>GitHub Issue #XX - Playlist Feature</li> </ul>"},{"location":"user-guide/playlists/#workaround","title":"Workaround","text":"<p>Until playlists are implemented, you can:</p> <ol> <li>Use browser bookmarks for favorite scenes</li> <li>Use Stash's built-in playlist features</li> <li>Create scenes collections using tags in Stash</li> </ol>"},{"location":"user-guide/playlists/#next-steps","title":"Next Steps","text":"<ul> <li>Video Playback - Learn about playing videos</li> <li>Search &amp; Browse - Find content</li> </ul>"},{"location":"user-guide/search-browse/","title":"Search &amp; Browse","text":"<p>Peek provides powerful search and filtering capabilities to help you find content quickly.</p>"},{"location":"user-guide/search-browse/#browsing-content","title":"Browsing Content","text":""},{"location":"user-guide/search-browse/#navigation-menu","title":"Navigation Menu","text":"<p>Access different content types from the main navigation:</p> <ul> <li>Scenes: Browse all video scenes</li> <li>Performers: View performer profiles</li> <li>Studios: Browse by production studio</li> <li>Tags: Explore content by category</li> </ul>"},{"location":"user-guide/search-browse/#scene-grid","title":"Scene Grid","text":"<p>The scenes page displays content in a responsive grid layout:</p> <ul> <li>Thumbnails: Preview images for each scene</li> <li>Animated Previews: Hover over any scene card to see a cycling preview of 10 thumbnails from the video</li> <li>Duration: Video length displayed on thumbnail</li> <li>Rating: Star rating (if set)</li> <li>Title: Scene title</li> <li>Performers: Quick performer links</li> </ul> <p>Scene Card Previews</p> <p>Just like Netflix, hovering over scene cards shows an animated preview cycling through the video. This helps you quickly identify content without opening the detail page.</p>"},{"location":"user-guide/search-browse/#sorting","title":"Sorting","text":"<p>Change how content is sorted using the sort dropdown:</p> Sort Option Description Date Most recent first (default) Title Alphabetical order Rating Highest rated first Duration Longest videos first <p>Sort Direction: - Click the sort direction button to toggle between ascending (\u2191) and descending (\u2193)</p>"},{"location":"user-guide/search-browse/#filtering","title":"Filtering","text":""},{"location":"user-guide/search-browse/#using-filters","title":"Using Filters","text":"<ol> <li>Click the Filter button to open the filter panel</li> <li>Select your filter criteria</li> <li>Click Apply to update results</li> <li>Click Clear to reset filters</li> </ol>"},{"location":"user-guide/search-browse/#available-filters","title":"Available Filters","text":"<p>Scene Filters: - Rating: Minimum star rating - Duration: Minimum/maximum length - Performers: Filter by specific performers - Studios: Filter by production studio - Tags: Filter by categories - Has Markers: Show only scenes with markers</p> <p>Performer Filters: - Favorite: Show only favorites - Gender: Filter by gender - Age: Filter by age range</p> <p>Studio Filters: - Scene Count: Minimum number of scenes</p> <p>Tag Filters: - Scene Count: Minimum number of tagged scenes</p>"},{"location":"user-guide/search-browse/#search","title":"Search","text":""},{"location":"user-guide/search-browse/#basic-search","title":"Basic Search","text":"<p>Use the search box to find content by name:</p> <ol> <li>Click the search box at the top of any browse page</li> <li>Type your search query</li> <li>Results update automatically as you type</li> </ol> <p>Search applies to: - Scene titles - Performer names - Studio names - Tag names</p>"},{"location":"user-guide/search-browse/#search-tips","title":"Search Tips","text":"<p>Search Best Practices</p> <ul> <li>Use specific terms for better results</li> <li>Search is case-insensitive</li> <li>Partial matches are included</li> <li>Combine search with filters for precision</li> </ul>"},{"location":"user-guide/search-browse/#pagination","title":"Pagination","text":"<p>Navigate through large result sets:</p> <ul> <li>Per Page: Choose how many items to display (default: 25)</li> <li>Page Numbers: Click to jump to specific page</li> <li>Previous/Next: Navigate one page at a time</li> <li>First/Last: Jump to beginning or end</li> </ul>"},{"location":"user-guide/search-browse/#performer-pages","title":"Performer Pages","text":"<p>Click any performer to view their dedicated page:</p> <ul> <li>Profile Information: Bio, measurements, birthdate</li> <li>Scenes: All scenes featuring the performer</li> <li>Tags: Associated tags</li> <li>Favorite Status: Mark as favorite</li> </ul>"},{"location":"user-guide/search-browse/#studio-pages","title":"Studio Pages","text":"<p>Click any studio to view their page:</p> <ul> <li>Studio Information: Name, URL, parent studio</li> <li>Scenes: All scenes from this studio</li> <li>Scene Count: Total number of scenes</li> </ul>"},{"location":"user-guide/search-browse/#tag-pages","title":"Tag Pages","text":"<p>Click any tag to view tagged content:</p> <ul> <li>Tag Information: Name and description</li> <li>Scenes: All scenes with this tag</li> <li>Scene Count: Total tagged scenes</li> </ul>"},{"location":"user-guide/search-browse/#quick-actions","title":"Quick Actions","text":""},{"location":"user-guide/search-browse/#from-scene-cards","title":"From Scene Cards","text":"<p>Hover over scene cards for quick actions:</p> <ul> <li>Play: Start playback immediately</li> <li>Add to Playlist: Add to a playlist (when feature is available)</li> <li>View Details: Open full scene page</li> </ul>"},{"location":"user-guide/search-browse/#from-detail-pages","title":"From Detail Pages","text":"<p>Scene detail pages provide additional actions:</p> <ul> <li>Play Video: Start playback</li> <li>View Performers: Navigate to performer pages</li> <li>View Studio: Navigate to studio page</li> <li>View Tags: Navigate to tag pages</li> </ul>"},{"location":"user-guide/search-browse/#keyboard-navigation","title":"Keyboard Navigation","text":"<p>Navigate browse pages efficiently:</p> Key Action / Focus search box Enter Apply search/filters Esc Clear search/close filter panel Arrow Keys Navigate through grid items"},{"location":"user-guide/search-browse/#tips-for-finding-content","title":"Tips for Finding Content","text":""},{"location":"user-guide/search-browse/#using-tags-effectively","title":"Using Tags Effectively","text":"<ul> <li>Browse popular tags first to discover content</li> <li>Combine multiple tags for specific content</li> <li>Use tag pages to explore similar scenes</li> </ul>"},{"location":"user-guide/search-browse/#using-performers","title":"Using Performers","text":"<ul> <li>Mark performers as favorites for quick access</li> <li>Use performer filter to see all their scenes</li> <li>Check performer pages for comprehensive info</li> </ul>"},{"location":"user-guide/search-browse/#using-studios","title":"Using Studios","text":"<ul> <li>Filter by preferred production companies</li> <li>Explore studio catalogs systematically</li> <li>Use scene count to find most active studios</li> </ul>"},{"location":"user-guide/search-browse/#combining-filters","title":"Combining Filters","text":"<p>For precise results, combine multiple filters:</p> <p>Example: Find highly-rated recent scenes from a specific studio 1. Sort by: Date (descending) 2. Filter by: Rating &gt; 4 stars 3. Filter by: Studio = \"Preferred Studio\"</p>"},{"location":"user-guide/search-browse/#next-steps","title":"Next Steps","text":"<ul> <li>Video Playback - Learn how to play videos</li> <li>Settings - Customize your experience</li> </ul>"},{"location":"user-guide/settings/","title":"Settings","text":"<p>Configure Peek to match your preferences and manage your account.</p>"},{"location":"user-guide/settings/#accessing-settings","title":"Accessing Settings","text":"<ol> <li>Click your username in the top-right corner</li> <li>Select Settings from the dropdown menu</li> </ol>"},{"location":"user-guide/settings/#user-preferences","title":"User Preferences","text":""},{"location":"user-guide/settings/#theme","title":"Theme","text":"<p>Choose between light and dark themes:</p> <ul> <li>Dark Mode (default): Easier on the eyes in low light</li> <li>Light Mode: Better for bright environments</li> </ul> <p>System Theme</p> <p>Peek respects your browser's color scheme preference by default.</p>"},{"location":"user-guide/settings/#language","title":"Language","text":"<p>Language selection (planned for future release):</p> <ul> <li>English (current)</li> <li>Additional languages coming soon</li> </ul>"},{"location":"user-guide/settings/#account-management","title":"Account Management","text":""},{"location":"user-guide/settings/#change-password","title":"Change Password","text":"<ol> <li>Navigate to Settings \u2192 Account</li> <li>Enter your current password</li> <li>Enter your new password</li> <li>Confirm new password</li> <li>Click Save Changes</li> </ol> <p>Password Requirements</p> <p>Passwords must be at least 6 characters long.</p>"},{"location":"user-guide/settings/#email-address","title":"Email Address","text":"<p>Update your email address:</p> <ol> <li>Navigate to Settings \u2192 Account</li> <li>Enter your new email</li> <li>Enter your password to confirm</li> <li>Click Save Changes</li> </ol>"},{"location":"user-guide/settings/#video-playback-preferences","title":"Video Playback Preferences","text":""},{"location":"user-guide/settings/#default-quality","title":"Default Quality","text":"<p>Set your preferred default quality:</p> <ul> <li>Auto (recommended): Automatically adapts to bandwidth</li> <li>720p: Best quality, requires good connection</li> <li>480p: Balanced quality and bandwidth</li> <li>360p: Lower quality, works on slow connections</li> </ul>"},{"location":"user-guide/settings/#autoplay","title":"Autoplay","text":"<p>Control autoplay behavior:</p> <ul> <li>Enabled: Videos start playing automatically</li> <li>Disabled: Click play to start videos</li> </ul>"},{"location":"user-guide/settings/#playback-speed","title":"Playback Speed","text":"<p>Set your preferred default playback speed:</p> <ul> <li>0.5x: Half speed</li> <li>1x: Normal speed (default)</li> <li>1.25x: Slightly faster</li> <li>1.5x: Faster</li> <li>2x: Double speed</li> </ul>"},{"location":"user-guide/settings/#privacy-security","title":"Privacy &amp; Security","text":""},{"location":"user-guide/settings/#session-management","title":"Session Management","text":"<p>View and manage active sessions:</p> <ul> <li>See list of active devices/browsers</li> <li>Revoke access to specific sessions</li> <li>End all other sessions</li> </ul>"},{"location":"user-guide/settings/#login-history","title":"Login History","text":"<p>View recent login activity:</p> <ul> <li>Date and time</li> <li>IP address</li> <li>Browser and device</li> <li>Location (approximate)</li> </ul> <p>Security Tip</p> <p>Review your login history regularly to ensure account security.</p>"},{"location":"user-guide/settings/#admin-settings","title":"Admin Settings","text":"<p>Admin users have access to additional settings.</p>"},{"location":"user-guide/settings/#user-management","title":"User Management","text":"<p>Admins can manage all users:</p> <ol> <li>Navigate to Settings \u2192 Users</li> <li>View list of all users</li> <li>Create new users</li> <li>Edit user roles (Admin/User)</li> <li>Disable or delete users</li> </ol> <p>Creating a New User:</p> <ol> <li>Click Add User</li> <li>Enter email</li> <li>Enter password</li> <li>Select role (Admin or User)</li> <li>Click Create</li> </ol>"},{"location":"user-guide/settings/#server-settings","title":"Server Settings","text":"<p>View server information and configuration:</p> <ul> <li>Version: Current Peek version</li> <li>Stash Connection: Connection status to Stash server</li> <li>Database: SQLite database info</li> <li>Storage: Disk usage for temp files</li> </ul>"},{"location":"user-guide/settings/#system-health","title":"System Health","text":"<p>Monitor system health:</p> <ul> <li>CPU Usage: Current CPU utilization</li> <li>Memory: RAM usage</li> <li>Active Sessions: Number of transcoding sessions</li> <li>Uptime: Server uptime</li> </ul>"},{"location":"user-guide/settings/#notifications","title":"Notifications","text":"<p>Configure notification preferences (planned feature):</p> <ul> <li>Email Notifications: Get email for important events</li> <li>Browser Notifications: Push notifications in browser</li> <li>Notification Types: Choose which events to be notified about</li> </ul>"},{"location":"user-guide/settings/#data-privacy","title":"Data &amp; Privacy","text":""},{"location":"user-guide/settings/#export-data","title":"Export Data","text":"<p>Export your user data:</p> <ol> <li>Navigate to Settings \u2192 Privacy</li> <li>Click Export Data</li> <li>Download JSON file with your data</li> </ol> <p>Exported data includes: - Account information - Preferences - Playlist data (when available) - Viewing history (when available)</p>"},{"location":"user-guide/settings/#delete-account","title":"Delete Account","text":"<p>Permanently delete your account:</p> <ol> <li>Navigate to Settings \u2192 Privacy</li> <li>Click Delete Account</li> <li>Enter your password to confirm</li> <li>Click Permanently Delete</li> </ol> <p>Warning: This Cannot Be Undone</p> <p>Deleting your account is permanent and cannot be reversed.</p>"},{"location":"user-guide/settings/#troubleshooting-settings","title":"Troubleshooting Settings","text":""},{"location":"user-guide/settings/#reset-to-defaults","title":"Reset to Defaults","text":"<p>If you experience issues with settings:</p> <ol> <li>Navigate to Settings \u2192 Advanced</li> <li>Click Reset to Defaults</li> <li>Confirm reset</li> </ol> <p>This will reset: - Theme preferences - Video playback defaults - UI preferences</p> <p>This will NOT reset: - Account credentials - User role - Admin-configured server settings</p>"},{"location":"user-guide/settings/#clear-cache","title":"Clear Cache","text":"<p>Clear local browser cache:</p> <ol> <li>Navigate to Settings \u2192 Advanced</li> <li>Click Clear Cache</li> <li>Refresh the page</li> </ol> <p>This clears: - Temporary data - Cached API responses - Session data</p>"},{"location":"user-guide/settings/#next-steps","title":"Next Steps","text":"<ul> <li>Video Playback - Configure playback preferences</li> <li>Search &amp; Browse - Find content</li> <li>Security - Security best practices</li> </ul>"},{"location":"user-guide/video-playback/","title":"Video Playback","text":"<p>Peek provides smooth video playback with adaptive quality streaming, multiple playback speeds, and keyboard shortcuts for efficient navigation.</p>"},{"location":"user-guide/video-playback/#playing-videos","title":"Playing Videos","text":""},{"location":"user-guide/video-playback/#starting-playback","title":"Starting Playback","text":"<ol> <li>Browse to Scenes from the navigation menu</li> <li>Click on any scene card to open the scene detail page</li> <li>The video player will automatically load and start playing</li> </ol> <p>Direct URLs</p> <p>Scene detail pages support direct URLs, so you can bookmark or share specific scenes.</p>"},{"location":"user-guide/video-playback/#video-player-controls","title":"Video Player Controls","text":"<p>The video player includes standard playback controls:</p> Control Function Play/Pause Start or pause video playback Progress Bar Seek to any position in the video Volume Adjust audio volume or mute Playback Speed Change playback speed (0.5x, 1x, 1.25x, 1.5x, 2x) Quality Selector Choose video quality (Auto, 720p, 480p, 360p) Fullscreen Toggle fullscreen mode"},{"location":"user-guide/video-playback/#quality-selection","title":"Quality Selection","text":"<p>Peek transcodes videos on-demand using FFmpeg to provide adaptive quality streaming.</p>"},{"location":"user-guide/video-playback/#available-qualities","title":"Available Qualities","text":"Quality Resolution Bitrate Best For 720p 1280\u00d7720 2.5 Mbps Local networks, wired connections 480p 854\u00d7480 1.0 Mbps WiFi, moderate bandwidth 360p 640\u00d7360 500 Kbps Mobile devices, low bandwidth Auto Adaptive Varies Let Peek choose based on bandwidth"},{"location":"user-guide/video-playback/#changing-quality","title":"Changing Quality","text":"<ol> <li>Click the Quality button in the player controls</li> <li>Select your preferred quality from the dropdown</li> <li>The player will switch seamlessly</li> </ol> <p>Quality vs Performance</p> <p>Higher quality requires more bandwidth and CPU for transcoding. If playback is stuttering, try a lower quality.</p>"},{"location":"user-guide/video-playback/#playback-speed","title":"Playback Speed","text":"<p>Adjust playback speed for faster or slower viewing:</p> <ol> <li>Click the Speed button (default shows \"1x\")</li> <li>Choose from: 0.5x, 1x, 1.25x, 1.5x, 2x</li> <li>Audio pitch is preserved at all speeds</li> </ol>"},{"location":"user-guide/video-playback/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"Key Action Space or K Play/Pause \u2190 Seek backward 5 seconds \u2192 Seek forward 5 seconds J Seek backward 10 seconds L Seek forward 10 seconds \u2191 Increase volume \u2193 Decrease volume M Mute/Unmute F Toggle fullscreen 0-9 Seek to 0%-90% of video Home Seek to beginning End Seek to end <p>Power User Shortcuts</p> <p>Use J and L for quick 10-second jumps, or 0-9 number keys to jump to specific percentages.</p>"},{"location":"user-guide/video-playback/#seeking","title":"Seeking","text":""},{"location":"user-guide/video-playback/#timeline-seeking","title":"Timeline Seeking","text":"<ul> <li>Click on the progress bar to jump to that position</li> <li>Hover over the progress bar to see a live preview thumbnail with timestamp</li> <li>Drag the playhead to scrub through the video</li> </ul> <p>Sprite Sheet Previews</p> <p>Peek uses Stash's sprite sheet thumbnails to show you exactly what's at each position in the video as you hover. This makes finding specific scenes much faster!</p>"},{"location":"user-guide/video-playback/#smart-seeking","title":"Smart Seeking","text":"<p>Peek uses intelligent session management for efficient seeking:</p> <ul> <li>Nearby seeks (&lt; 30 seconds): Reuses the current transcoding session</li> <li>Far seeks (&gt; 30 seconds): Creates a new session starting from the new position</li> <li>Already transcoded segments are preserved for instant playback</li> </ul>"},{"location":"user-guide/video-playback/#fullscreen-mode","title":"Fullscreen Mode","text":""},{"location":"user-guide/video-playback/#entering-fullscreen","title":"Entering Fullscreen","text":"<ul> <li>Click the Fullscreen button in the player controls</li> <li>Press F on your keyboard</li> <li>Double-click the video (if enabled)</li> </ul>"},{"location":"user-guide/video-playback/#exiting-fullscreen","title":"Exiting Fullscreen","text":"<ul> <li>Click the Exit Fullscreen button</li> <li>Press F or Esc on your keyboard</li> </ul> <p>Browser Permissions</p> <p>Some browsers may prompt for permission to enter fullscreen. Allow it for the best experience.</p>"},{"location":"user-guide/video-playback/#video-information","title":"Video Information","text":"<p>Scene detail pages display comprehensive video information:</p>"},{"location":"user-guide/video-playback/#scene-metadata","title":"Scene Metadata","text":"<ul> <li>Title: Scene title from Stash</li> <li>Date: Recording or release date</li> <li>Duration: Total video length</li> <li>Rating: Star rating (if set)</li> <li>Studio: Production studio</li> <li>Performers: Cast members with links to their pages</li> <li>Tags: Categories and descriptive tags</li> </ul>"},{"location":"user-guide/video-playback/#file-information","title":"File Information","text":"<ul> <li>Resolution: Original video resolution</li> <li>File Size: Original file size</li> <li>Codec: Video and audio codecs</li> <li>Bitrate: Original bitrate</li> </ul>"},{"location":"user-guide/video-playback/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/video-playback/#video-wont-play","title":"Video Won't Play","text":"<p>Symptoms: Player shows loading spinner indefinitely or displays error</p> <p>Solutions:</p> <ol> <li> <p>Check FFmpeg: Ensure FFmpeg is installed on the server    <pre><code>docker exec peek-stash-browser ffmpeg -version\n</code></pre></p> </li> <li> <p>Check file permissions: Verify media directory is readable    <pre><code>docker exec peek-stash-browser ls -la /app/media\n</code></pre></p> </li> <li> <p>Check backend logs: Look for transcoding errors    <pre><code>docker logs peek-stash-browser\n</code></pre></p> </li> <li> <p>Verify path mapping: Ensure <code>STASH_INTERNAL_PATH</code> and <code>STASH_MEDIA_PATH</code> are configured correctly</p> </li> </ol>"},{"location":"user-guide/video-playback/#buffering-or-stuttering","title":"Buffering or Stuttering","text":"<p>Symptoms: Video pauses frequently to buffer or plays choppy</p> <p>Possible Causes &amp; Solutions:</p> <ol> <li>Network bandwidth: Reduce quality to 480p or 360p</li> <li>Server CPU: Check CPU usage during transcoding</li> <li>Slow storage: Media on network share (SMB/NFS) is slower than local storage</li> <li>Too many simultaneous streams: Each stream requires CPU for transcoding</li> </ol> <p>Performance Tip</p> <p>For best performance, store media on local SSD storage and allocate sufficient CPU resources to the container.</p>"},{"location":"user-guide/video-playback/#seeking-is-slow","title":"Seeking Is Slow","text":"<p>Symptoms: Seeking takes a long time to start playing from new position</p> <p>Possible Causes:</p> <ol> <li>Large seek distance: Seeking far ahead requires new transcoding session</li> <li>I/O performance: Check storage read speed</li> <li>CPU bottleneck: Transcoding can't keep up</li> </ol> <p>Solutions:</p> <ul> <li>Wait for initial buffering to complete before seeking</li> <li>Use lower quality for faster transcoding startup</li> <li>Ensure media is on fast local storage</li> </ul>"},{"location":"user-guide/video-playback/#audio-out-of-sync","title":"Audio Out of Sync","text":"<p>Symptoms: Audio plays ahead or behind video</p> <p>Solutions:</p> <ol> <li>Refresh the page and restart playback</li> <li>Try a different quality level</li> <li>Check if issue exists in original file</li> </ol> <p>If problem persists, report on GitHub Issues with: - Scene ID - Video codec/container format - Browser and version</p>"},{"location":"user-guide/video-playback/#quality-switching-doesnt-work","title":"Quality Switching Doesn't Work","text":"<p>Symptoms: Selecting different quality has no effect</p> <p>Solutions:</p> <ol> <li>Check browser console for errors (F12 \u2192 Console tab)</li> <li>Verify multiple qualities are being transcoded:    <pre><code>docker exec peek-stash-browser ls -la /app/data/hls-cache/&lt;session-id&gt;/\n</code></pre></li> <li>Check backend logs for FFmpeg errors</li> </ol>"},{"location":"user-guide/video-playback/#advanced-features","title":"Advanced Features","text":""},{"location":"user-guide/video-playback/#direct-play-vs-transcoding","title":"Direct Play vs Transcoding","text":"<p>Peek always transcodes videos to HLS format for:</p> <ul> <li>Adaptive quality: Switch quality on-the-fly</li> <li>Universal compatibility: Works in all modern browsers</li> <li>Seeking efficiency: Fast seeking with HLS segments</li> <li>Bandwidth adaptation: Auto quality based on network conditions</li> </ul> <p>Future Feature: Direct Play</p> <p>Direct play (serving original file without transcoding) is planned for supported formats when quality switching isn't needed.</p>"},{"location":"user-guide/video-playback/#picture-in-picture-pip","title":"Picture-in-Picture (PiP)","text":"<p>Some browsers support Picture-in-Picture mode:</p> <ol> <li>Right-click the video</li> <li>Select \"Picture in Picture\" (browser-dependent)</li> <li>Video floats in a small window while you browse other tabs</li> </ol>"},{"location":"user-guide/video-playback/#casting","title":"Casting","text":"<p>Browser casting to Chromecast or AirPlay may work but is not officially supported. Transcoded HLS streams can typically be cast like any other web video.</p>"},{"location":"user-guide/video-playback/#next-steps","title":"Next Steps","text":"<ul> <li>Playlists - Create and manage video playlists</li> <li>Search &amp; Browse - Find content quickly</li> <li>Troubleshooting - More troubleshooting tips</li> </ul>"}]}