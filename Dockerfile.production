# Production Single Container Dockerfile
# Combines frontend and backend with SQLite database

FROM node:18-slim as frontend-build

# Build frontend
WORKDIR /app/client
COPY client/package*.json ./
RUN npm install
COPY client/ ./
RUN npm run build

FROM node:18-slim as backend-build

# Install FFmpeg for video processing and SQLite for database
RUN apt-get update && \
    apt-get install -y ffmpeg sqlite3 && \
    rm -rf /var/lib/apt/lists/*

# Build backend
WORKDIR /app/server
COPY server/package*.json ./
RUN npm install
COPY server/prisma ./prisma
RUN npx prisma generate
COPY server/ ./
RUN npm run build

FROM node:18-slim as production

# Install FFmpeg, nginx, and SQLite for serving both frontend and backend
RUN apt-get update && \
    apt-get install -y ffmpeg nginx sqlite3 && \
    rm -rf /var/lib/apt/lists/*

# Create application directory
WORKDIR /app

# Copy backend from build stage
COPY --from=backend-build /app/server/dist ./backend/
COPY --from=backend-build /app/server/node_modules ./node_modules/
COPY --from=backend-build /app/server/package*.json ./
COPY --from=backend-build /app/server/prisma ./prisma/

# Copy frontend from build stage
COPY --from=frontend-build /app/client/dist ./frontend/

# Create nginx configuration
RUN echo 'server { \
    listen 80; \
    server_name localhost; \
    \
    # Serve frontend static files \
    location / { \
        root /app/frontend; \
        try_files $uri $uri/ /index.html; \
        add_header Cache-Control "public, max-age=3600"; \
    } \
    \
    # Proxy API requests to backend \
    location /api/ { \
        proxy_pass http://localhost:8000; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
    } \
}' > /etc/nginx/conf.d/default.conf

# Remove default nginx config
RUN rm /etc/nginx/sites-enabled/default

# Create directories for data and temp files
RUN mkdir -p /app/data /app/tmp /app/media

# Create startup script
RUN echo '#!/bin/bash \n\
# Start nginx in background \n\
nginx \n\
\n\
# Initialize database \n\
export DATABASE_URL="file:/app/data/peek-stash-browser.db" \n\
cd /app \n\
npx prisma generate \n\
npx prisma db push --accept-data-loss \n\
\n\
# Start backend \n\
node backend/index.js' > /app/start.sh && \
    chmod +x /app/start.sh

# Expose port 80 for combined frontend/backend access
EXPOSE 80

# Set environment variables
ENV DATABASE_URL="file:/app/data/peek-stash-browser.db"
ENV TMP_DIR="/app/tmp"
ENV NODE_ENV="production"

# Create volumes for persistence
VOLUME ["/app/data", "/app/tmp", "/app/media"]

# Start the combined application
CMD ["/app/start.sh"]