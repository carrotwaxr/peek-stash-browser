# Production Single Container Dockerfile
# Combines frontend and backend with SQLite database
# Optimized for size and build performance

# ===========================
# Stage 1: Frontend Build
# ===========================
FROM node:22-slim AS frontend-build

WORKDIR /app/client

# Copy package files first for better layer caching
COPY client/package*.json ./

# Use npm ci for reproducible builds
RUN npm ci --no-audit --prefer-offline

# Copy source and build
COPY client/ ./
RUN npm run build

# ===========================
# Stage 2: Backend Build
# ===========================
FROM node:22-slim AS backend-build

WORKDIR /app/server

# Install build dependencies in one layer
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        python3 \
        make \
        g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy package files first for better layer caching
COPY server/package*.json ./

# Install all dependencies (including dev) for build
RUN npm ci --no-audit --prefer-offline

# Copy Prisma schema and generate client
COPY server/prisma ./prisma
RUN npx prisma generate

# Copy source and build
COPY server/ ./
RUN npm run build

# ===========================
# Stage 3: Production Runtime
# ===========================
FROM node:22-slim AS production

# Install runtime dependencies in one layer
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ffmpeg \
        nginx \
        sqlite3 \
        ca-certificates \
        curl \
    && rm -rf /var/lib/apt/lists/* \
    && rm -f /etc/nginx/sites-enabled/default

WORKDIR /app

# Copy package files
COPY server/package*.json ./

# Install production dependencies only
RUN npm ci --omit=dev --no-audit --prefer-offline

# Copy Prisma schema and generate client
COPY server/prisma ./prisma
RUN npx prisma generate

# Copy built backend from build stage
COPY --from=backend-build /app/server/dist ./backend/

# Copy built frontend from build stage
COPY --from=frontend-build /app/client/dist ./frontend/

# Copy nginx configuration and startup script
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf
COPY docker/start.sh /app/start.sh
RUN chmod +x /app/start.sh

# Create directories for data and temp files
RUN mkdir -p /app/data /app/tmp /app/media

# Expose port 80
EXPOSE 80

# Set environment variables
ENV DATABASE_URL="file:/app/data/peek-stash-browser.db" \
    TMP_DIR="/app/tmp" \
    NODE_ENV="production" \
    NODE_OPTIONS="--max-old-space-size=2048"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/api/health || exit 1

# Create volumes for persistence
VOLUME ["/app/data", "/app/tmp", "/app/media"]

# Start the combined application
CMD ["/app/start.sh"]